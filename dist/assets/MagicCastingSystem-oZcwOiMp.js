class c{constructor(){this.castingEntities=new Map,this.spellSchools=["FIRE","ICE","LIGHTNING","NATURE","HOLY","DARK","ARCANE","BLOOD"],this.castAnimations={instant_cast:"/assets/animations/magic_instant_cast.fbx",channel_start:"/assets/animations/magic_channel_start.fbx",channeling:"/assets/animations/magic_channeling.fbx",cast_finish:"/assets/animations/magic_cast_finish.fbx",overcharge:"/assets/animations/magic_overcharge.fbx"},this.spellVFX={fireball:"/assets/particles/fireball_cast.png",ice_storm:"/assets/particles/ice_storm.png",lightning_bolt:"/assets/particles/lightning_cast.png",heal:"/assets/particles/heal_glow.png",dark_pulse:"/assets/particles/dark_energy.png",arcane_missiles:"/assets/particles/arcane_missiles.png"}}castSpell(s,t,i,e){return console.log(`${s} casting ${t} (${i}s, ${e} mana)`),i===0?(console.log("  Instant cast!"),console.log(`  Animation: ${this.castAnimations.instant_cast}`),{success:!0,instant:!0}):(console.log(`  Animation: ${this.castAnimations.channel_start}`),this.castingEntities.set(s,{spell:t,startTime:Date.now(),castTime:i*1e3,interruptible:!0}),{success:!0,channeling:!0})}interruptCast(s){const t=this.castingEntities.get(s);return t&&t.interruptible?(console.log(`${s} spell interrupted!`),this.castingEntities.delete(s),!0):!1}update(s){const t=Date.now();for(const[i,e]of this.castingEntities.entries())if(t-e.startTime>=e.castTime){console.log(`${i} completed ${e.spell}!`),console.log(`  Animation: ${this.castAnimations.cast_finish}`);const n=this.spellVFX[e.spell.toLowerCase()]||this.spellVFX.fireball;console.log(`  VFX: ${n}`),this.castingEntities.delete(i)}}}export{c as MagicCastingSystem};
