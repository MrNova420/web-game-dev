class P{constructor(t,e){this.ui=t,this.audio=e,this.players=new Map,this.config={maxLevel:100,baseXPRequired:100,xpScaling:1.15,statPointsPerLevel:5,skillPointsPerLevel:1,xpSources:{killEnemy:1,killBoss:5,completeQuest:2,completeDaily:1.5,exploration:.5,crafting:.3,gathering:.2,fishing:.3,cooking:.3,achievement:1,dungeon:3},milestones:{10:{reward:"basic_mount",title:"Adventurer"},20:{reward:"advanced_skills",title:"Veteran"},30:{reward:"epic_gear",title:"Hero"},40:{reward:"legendary_weapon",title:"Champion"},50:{reward:"flying_mount",title:"Master"},60:{reward:"artifact",title:"Legend"},70:{reward:"mythic_ability",title:"Mythic"},80:{reward:"divine_blessing",title:"Divine"},90:{reward:"cosmic_power",title:"Cosmic"},100:{reward:"ultimate_form",title:"Transcendent"}}},this.restedXP=new Map,this.maxRestedXP=150,this.restedXPRate=5,this.xpMultipliers=new Map,this.parties=new Map,this.stats=new Map}registerPlayer(t,e={}){const s={id:t,level:e.level||1,xp:e.xp||0,totalXP:e.totalXP||0,statPoints:e.statPoints||0,skillPoints:e.skillPoints||0,restedXP:e.restedXP||0,lastLogout:e.lastLogout||Date.now(),milestones:e.milestones||[]};return this.players.set(t,s),this.stats.set(t,{totalXPGained:0,levelsGained:0,xpBySource:{},fastestLevelUp:1/0,slowestLevelUp:0,averageLevelUpTime:0}),e.lastLogout&&this.updateRestedXP(t),s}getXPRequired(t){return t>=this.config.maxLevel?1/0:Math.floor(this.config.baseXPRequired*Math.pow(this.config.xpScaling,t-1))}getTotalXPToLevel(t){let e=0;for(let s=1;s<t;s++)e+=this.getXPRequired(s);return e}awardXP(t,e,s="unknown",l={}){const i=this.players.get(t);if(!i)return{success:!1,reason:"Player not found"};if(i.level>=this.config.maxLevel)return{success:!1,reason:"Max level reached"};const r=this.config.xpSources[s]||1;let n=e*r;const a=this.xpMultipliers.get(t)||1;n*=a;let o=0;if(i.restedXP>0){const h=Math.min(n*.5,i.restedXP);o=h,i.restedXP-=h,n+=o}i.xp+=n,i.totalXP+=n;const u=this.stats.get(t);u.totalXPGained+=n,u.xpBySource[s]=(u.xpBySource[s]||0)+n;const c=this.checkLevelUp(t);return this.ui&&this.ui.showXPGain(t,Math.floor(n),o>0),{success:!0,xpGained:n,restedBonus:o,currentXP:i.xp,currentLevel:i.level,leveledUp:c.length>0,newLevels:c}}checkLevelUp(t){const e=this.players.get(t);if(!e)return[];const s=[];for(;e.level<this.config.maxLevel;){const l=this.getXPRequired(e.level);if(e.xp>=l){e.xp-=l,e.level++,e.statPoints+=this.config.statPointsPerLevel,e.skillPoints+=this.config.skillPointsPerLevel;const i=this.config.milestones[e.level];i&&!e.milestones.includes(e.level)?(e.milestones.push(e.level),s.push({level:e.level,milestone:i,hasMilestone:!0})):s.push({level:e.level,hasMilestone:!1});const r=this.stats.get(t);r.levelsGained++,this.onLevelUp(t,e.level,i)}else break}return s}onLevelUp(t,e,s){this.ui&&this.ui.showLevelUpEffect(t,e,s),this.audio&&(s?this.audio.playSFX("level_up_milestone"):this.audio.playSFX("level_up")),this.emit("levelUp",{playerId:t,level:e,milestone:s||null})}setXPMultiplier(t,e,s=null){this.xpMultipliers.set(t,e),s&&setTimeout(()=>{this.xpMultipliers.delete(t)},s)}updateRestedXP(t){const e=this.players.get(t);if(!e)return;const l=(Date.now()-e.lastLogout)/6e4,i=Math.min(l*this.restedXPRate,this.maxRestedXP-e.restedXP);return e.restedXP+=i,{restedXP:e.restedXP,restedGained:i,minutesOffline:Math.floor(l)}}createParty(t,e=[]){const s=`party_${Date.now()}_${t}`;return this.parties.set(s,{id:s,leader:t,members:[t,...e],xpShareMode:"equal",xpBonus:1+e.length*.05}),s}awardPartyXP(t,e,s="combat"){const l=this.parties.get(t);if(!l)return;const r=e*l.xpBonus/l.members.length,n=[];for(const a of l.members){const o=this.awardXP(a,r,s);n.push({memberId:a,...o})}return n}getLevelInfo(t){const e=this.players.get(t);if(!e)return null;const s=this.getXPRequired(e.level),l=e.xp/s,i=Object.keys(this.config.milestones).map(Number).find(r=>r>e.level);return{level:e.level,xp:e.xp,totalXP:e.totalXP,xpRequired:s,xpProgress:l,percentComplete:Math.floor(l*100),statPoints:e.statPoints,skillPoints:e.skillPoints,restedXP:e.restedXP,nextMilestone:i,milestoneReward:i?this.config.milestones[i]:null,isMaxLevel:e.level>=this.config.maxLevel}}getStatistics(t){return this.stats.get(t)}savePlayerData(t){const e=this.players.get(t);return e?(e.lastLogout=Date.now(),{level:e.level,xp:e.xp,totalXP:e.totalXP,statPoints:e.statPoints,skillPoints:e.skillPoints,restedXP:e.restedXP,lastLogout:e.lastLogout,milestones:e.milestones}):null}emit(t,e){typeof this.onEvent=="function"&&this.onEvent(t,e)}}export{P as ExperienceLevelingSystem};
