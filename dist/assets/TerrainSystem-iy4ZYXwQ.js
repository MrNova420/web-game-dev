class y{constructor(e,i){this.scene=e,this.textureManager=i,this.config={chunkSize:128,chunkWorldSize:256,maxHeight:100,heightScale:1,seed:Math.random()*1e4,lodLevels:3},this.chunks=new Map,this.terrainTypes={plains:{heightScale:.3,roughness:.2},hills:{heightScale:.6,roughness:.4},mountains:{heightScale:1.5,roughness:.8},valleys:{heightScale:.4,roughness:.3},canyons:{heightScale:1,roughness:.9}},this.currentTerrainType="hills",this.materials={grass:null,rock:null,dirt:null,snow:null},this.detailObjects={grass:{models:["/assets/models/vegetation/grass_clump_01.glb","/assets/models/vegetation/grass_clump_02.glb","/assets/models/vegetation/grass_tall.glb"],loaded:[]},rocks:{models:["/assets/models/rocks/rock_small_01.glb","/assets/models/rocks/rock_medium_01.glb","/assets/models/rocks/boulder_large.glb","/assets/models/rocks/cliff_section.glb"],loaded:[]},trees:{models:["/assets/models/trees/pine_01.glb","/assets/models/trees/oak_01.glb","/assets/models/trees/birch_01.glb","/assets/models/trees/dead_tree.glb"],loaded:[]},bushes:{models:["/assets/models/vegetation/bush_01.glb","/assets/models/vegetation/shrub_01.glb"],loaded:[]}},this.polyHavenTextures={grass:"/assets/textures/terrain/grass_poly_haven/",rock:"/assets/textures/terrain/rock_poly_haven/",dirt:"/assets/textures/terrain/dirt_poly_haven/",snow:"/assets/textures/terrain/snow_poly_haven/",sand:"/assets/textures/terrain/sand_poly_haven/",mud:"/assets/textures/terrain/mud_poly_haven/"},this.initialize()}async initialize(){logger.info("[TerrainSystem] Initializing terrain system..."),await this.loadMaterials(),logger.info("[TerrainSystem] Terrain system initialized")}async loadMaterials(){this.textureManager&&(this.materials.grass=await this.textureManager.loadTerrainMaterial("grass",{x:50,y:50}),this.materials.rock=await this.textureManager.loadTerrainMaterial("rock",{x:50,y:50}),this.materials.dirt=await this.textureManager.loadTerrainMaterial("dirt",{x:50,y:50}),this.materials.snow=await this.textureManager.loadTerrainMaterial("snow",{x:50,y:50})),logger.info("[TerrainSystem] Materials loaded")}generateChunk(e,i){const s=`${e},${i}`;if(this.chunks.has(s))return this.chunks.get(s);const t=this.generateHeightmap(e,i),r=this.createTerrainGeometry(t),a=this.createTerrainMaterial(t),o={key:s,position:{x:e,z:i},mesh:{geometry:r,material:a,position:{x:e,z:i}},heightmap:t,lod:0,visible:!0};return this.chunks.set(s,o),logger.info(`[TerrainSystem] Generated chunk at (${e}, ${i})`),o}generateHeightmap(e,i){const s=this.config.chunkSize,t=[],r=this.terrainTypes[this.currentTerrainType];for(let a=0;a<s;a++){t[a]=[];for(let n=0;n<s;n++){const o=e*this.config.chunkWorldSize+n/s*this.config.chunkWorldSize,h=i*this.config.chunkWorldSize+a/s*this.config.chunkWorldSize;let l=0,c=1,g=.01;for(let u=0;u<4;u++)l+=this.noise(o*g,h*g)*c*r.heightScale,c*=.5,g*=2;l*=r.roughness,l*=this.config.maxHeight*this.config.heightScale,t[a][n]=l}}return t}noise(e,i){const s=this.config.seed,t=Math.sin(e*12.9898+i*78.233+s)*43758.5453;return(t-Math.floor(t))*2-1}createTerrainGeometry(e){const i=this.config.chunkSize,s=[],t=[],r=[],a=[];for(let n=0;n<i;n++)for(let o=0;o<i;o++){const h=e[n][o];s.push(o,h,n),r.push(o/i,n/i)}for(let n=0;n<i-1;n++)for(let o=0;o<i-1;o++){const h=n*i+o,l=h+1,c=(n+1)*i+o,g=c+1;t.push(h,c,l),t.push(l,c,g)}return this.calculateNormals(s,t,a),{vertices:s,indices:t,uvs:r,normals:a}}calculateNormals(e,i,s){for(let t=0;t<e.length;t+=3)s.push(0,0,0);for(let t=0;t<i.length;t+=3){const r=i[t]*3,a=i[t+1]*3,n=i[t+2]*3,o=[e[r],e[r+1],e[r+2]],h=[e[a],e[a+1],e[a+2]],l=[e[n],e[n+1],e[n+2]],c=[h[0]-o[0],h[1]-o[1],h[2]-o[2]],g=[l[0]-o[0],l[1]-o[1],l[2]-o[2]],u=[c[1]*g[2]-c[2]*g[1],c[2]*g[0]-c[0]*g[2],c[0]*g[1]-c[1]*g[0]];for(let d=0;d<3;d++){const f=i[t+d];s[f*3]+=u[0],s[f*3+1]+=u[1],s[f*3+2]+=u[2]}}for(let t=0;t<s.length;t+=3){const r=Math.sqrt(s[t]*s[t]+s[t+1]*s[t+1]+s[t+2]*s[t+2]);r>0&&(s[t]/=r,s[t+1]/=r,s[t+2]/=r)}}createTerrainMaterial(e){return{type:"blended",grassMaterial:this.materials.grass,rockMaterial:this.materials.rock,dirtMaterial:this.materials.dirt,snowMaterial:this.materials.snow}}getHeightAt(e,i){const s=Math.floor(e/this.config.chunkWorldSize),t=Math.floor(i/this.config.chunkWorldSize),r=`${s},${t}`,a=this.chunks.get(r);if(!a)return 0;const n=e%this.config.chunkWorldSize/this.config.chunkWorldSize*this.config.chunkSize,o=i%this.config.chunkWorldSize/this.config.chunkWorldSize*this.config.chunkSize,h=Math.floor(n),l=Math.floor(o),c=Math.min(h+1,this.config.chunkSize-1),g=Math.min(l+1,this.config.chunkSize-1),u=n-h,d=o-l,f=a.heightmap[l][h],k=a.heightmap[l][c],m=a.heightmap[g][h],p=a.heightmap[g][c],z=f*(1-u)+k*u,M=m*(1-u)+p*u;return z*(1-d)+M*d}setTerrainType(e){this.terrainTypes[e]&&(this.currentTerrainType=e,logger.info(`[TerrainSystem] Terrain type set to: ${e}`))}updateLOD(e){this.chunks.forEach(i=>{const s=Math.sqrt(Math.pow(i.position.x*this.config.chunkWorldSize-e.x,2)+Math.pow(i.position.z*this.config.chunkWorldSize-e.z,2));let t=0;s>500?t=2:s>250&&(t=1),i.lod!==t&&(i.lod=t)})}loadChunksAround(e,i,s){const t=Math.ceil(s/this.config.chunkWorldSize),r=Math.floor(e/this.config.chunkWorldSize),a=Math.floor(i/this.config.chunkWorldSize);for(let n=-t;n<=t;n++)for(let o=-t;o<=t;o++)this.generateChunk(r+n,a+o)}unloadDistantChunks(e,i,s){const t=Math.floor(e/this.config.chunkWorldSize),r=Math.floor(i/this.config.chunkWorldSize),a=Math.ceil(s/this.config.chunkWorldSize),n=[];this.chunks.forEach((o,h)=>{Math.sqrt(Math.pow(o.position.x-t,2)+Math.pow(o.position.z-r,2))>a&&n.push(h)}),n.forEach(o=>{this.chunks.delete(o),logger.info(`[TerrainSystem] Unloaded chunk: ${o}`)})}update(e){this.loadChunksAround(e.x,e.z,512),this.unloadDistantChunks(e.x,e.z,768),this.updateLOD(e)}dispose(){this.chunks.clear(),logger.info("[TerrainSystem] Disposed")}}export{y as TerrainSystem};
