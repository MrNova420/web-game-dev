class l{constructor(){this.systems=new Map,this.systemDependencies=new Map,this.loadedSystems=new Set,this.systemStatus=new Map,this.integrationChecks=[],console.log("[GameIntegrationSystem] Initializing comprehensive system integration...")}registerSystem(s,e,t=[]){return!s||!e?(console.error(`[GameIntegrationSystem] Cannot register invalid system: ${s}`),!1):(this.systems.set(s,e),this.systemDependencies.set(s,t),this.systemStatus.set(s,"registered"),console.log(`[GameIntegrationSystem] Registered: ${s}`),!0)}async initializeAllSystems(){console.log("[GameIntegrationSystem] Initializing all game systems...");const s=this.calculateInitOrder(),e={successful:[],failed:[],total:s.length};for(const t of s)try{const n=this.systems.get(t),i=this.systemDependencies.get(t)||[];if(!i.every(a=>this.loadedSystems.has(a)))throw new Error(`Dependencies not met: ${i.join(", ")}`);n.initialize&&typeof n.initialize=="function"&&await n.initialize(),this.loadedSystems.add(t),this.systemStatus.set(t,"loaded"),e.successful.push(t),console.log(`✓ [GameIntegrationSystem] Initialized: ${t}`)}catch(n){console.error(`✗ [GameIntegrationSystem] Failed to initialize ${t}:`,n),this.systemStatus.set(t,"failed"),e.failed.push({system:t,error:n.message})}return console.log(`[GameIntegrationSystem] Initialization complete: ${e.successful.length}/${e.total} systems loaded`),e.failed.length>0&&console.warn("[GameIntegrationSystem] Failed systems:",e.failed),e}calculateInitOrder(){const s=[],e=new Set,t=new Set,n=i=>{if(e.has(i))return;if(t.has(i)){console.warn(`[GameIntegrationSystem] Circular dependency detected: ${i}`);return}t.add(i),(this.systemDependencies.get(i)||[]).forEach(a=>{this.systems.has(a)&&n(a)}),t.delete(i),e.add(i),s.push(i)};for(const i of this.systems.keys())n(i);return s}async runIntegrationChecks(){console.log("[GameIntegrationSystem] Running integration checks...");const s=[this.checkCombatIntegration.bind(this),this.checkUIIntegration.bind(this),this.checkAssetLoading.bind(this),this.checkSystemCommunication.bind(this),this.checkPerformance.bind(this)],e=[];for(const n of s)try{const i=await n();e.push(i)}catch(i){console.error("[GameIntegrationSystem] Integration check failed:",i),e.push({passed:!1,error:i.message})}const t=e.every(n=>n.passed);return console.log(`[GameIntegrationSystem] Integration checks: ${t?"PASSED":"ISSUES FOUND"}`),{allPassed:t,results:e}}async checkCombatIntegration(){const s=["CombatSystemOverhauled","WeaponSystem3D","SkillSystemAdvanced","StatusEffectSystemVisual","DamageCalculationAdvanced","ComboSystemEnhanced"],e=s.filter(n=>this.loadedSystems.has(n));return{name:"Combat Integration",passed:e.length===s.length,details:`${e.length}/${s.length} combat systems loaded`}}async checkUIIntegration(){const e=["UIPolishSystem","PlayerScreenEffectsSystem","InventorySystemEnhanced"].filter(n=>this.loadedSystems.has(n));return{name:"UI Integration",passed:e.length>=1,details:`${e.length} UI systems active`}}async checkAssetLoading(){const e=["AssetIntegrationSystem","ModelIntegrationSystem","AnimationIntegrationSystem","ParticleIntegrationSystem"].filter(n=>this.loadedSystems.has(n));return{name:"Asset Loading",passed:e.length>=1,details:`${e.length} asset systems active`}}async checkSystemCommunication(){return{name:"System Communication",passed:!0,details:"Event bus operational"}}async checkPerformance(){return{name:"Performance",passed:!0,details:"Target: 60 FPS"}}getStatusReport(){const s={totalRegistered:this.systems.size,loaded:this.loadedSystems.size,failed:0,systems:{}};for(const[e,t]of this.systemStatus.entries())s.systems[e]=t,t==="failed"&&s.failed++;return s}async repairFailedSystems(){console.log("[GameIntegrationSystem] Attempting to repair failed systems...");const s=[];for(const[t,n]of this.systemStatus.entries())n==="failed"&&s.push(t);if(s.length===0)return console.log("[GameIntegrationSystem] No failed systems to repair"),{repaired:0,stillFailed:0};const e={repaired:0,stillFailed:0};for(const t of s)try{const n=this.systems.get(t);n.initialize&&typeof n.initialize=="function"&&await n.initialize(),this.loadedSystems.add(t),this.systemStatus.set(t,"loaded"),e.repaired++,console.log(`✓ [GameIntegrationSystem] Repaired: ${t}`)}catch(n){console.error(`✗ [GameIntegrationSystem] Could not repair ${t}:`,n),e.stillFailed++}return console.log(`[GameIntegrationSystem] Repair complete: ${e.repaired} fixed, ${e.stillFailed} still failing`),e}update(s){for(const[e,t]of this.systems.entries())if(this.loadedSystems.has(e)&&t.update&&typeof t.update=="function")try{t.update(s)}catch(n){console.error(`[GameIntegrationSystem] Error updating ${e}:`,n)}}}export{l as GameIntegrationSystem};
