class n{constructor(t,e){this.camera=t,this.character=e,this.cameraOffset=new THREE.Vector3(0,3,5),this.cameraLookOffset=new THREE.Vector3(0,1,0),this.cameraSmoothing=.1,this.targetPosition=new THREE.Vector3,this.currentPosition=new THREE.Vector3,this.targetRotation=new THREE.Quaternion,this.currentRotation=new THREE.Quaternion,this.movementSmoothing=.15,this.weaponSwayAmount=new THREE.Vector3(.02,.01,.01),this.weaponSwaySpeed=5,this.weaponSwayPhase=0,this.isGrounded=!0,this.fallVelocity=0,this.landingImpactThreshold=5,this.animationStates={idle:"/assets/animations/character_idle.fbx",walk:"/assets/animations/character_walk.fbx",run:"/assets/animations/character_run.fbx",jump:"/assets/animations/character_jump.fbx",fall:"/assets/animations/character_fall.fbx",land:"/assets/animations/character_land.fbx",dodge:"/assets/animations/character_dodge_roll.fbx",attack:"/assets/animations/character_attack.fbx"},this.currentAnimationState="idle",this.animationBlendTime=.2,this.init()}init(){console.log("SmoothAnimationSystem initialized"),console.log("- All animations: Mixamo (1000+ animations)"),console.log("- Camera smoothing: Enabled (lerp factor: 0.1)"),console.log("- Movement interpolation: Enabled (lerp factor: 0.15)"),console.log("- Weapon sway: Enabled"),console.log("- Landing impacts: Enabled")}updateCameraFollow(t,e){const a=t.clone().add(this.cameraOffset);this.camera.position.lerp(a,this.cameraSmoothing);const i=t.clone().add(this.cameraLookOffset);this.camera.lookAt(i)}updateCharacterMovement(t,e,a){this.currentPosition.lerp(t,this.movementSmoothing),this.character.position.copy(this.currentPosition),this.currentRotation.slerp(e,this.movementSmoothing),this.character.quaternion.copy(this.currentRotation)}updateWeaponSway(t,e,a){if(!t)return;const i=e.length();this.weaponSwayPhase+=a*this.weaponSwaySpeed*i,t.position.x=Math.sin(this.weaponSwayPhase)*this.weaponSwayAmount.x,t.position.y=Math.cos(this.weaponSwayPhase*2)*this.weaponSwayAmount.y,t.rotation.z=Math.sin(this.weaponSwayPhase*1.5)*this.weaponSwayAmount.z}handleLandingImpact(t){return t>this.landingImpactThreshold?(console.log(`Landing impact! (velocity: ${t.toFixed(2)})`),this.setAnimationState("land"),!0):!1}triggerJump(){console.log("Jump triggered (Mixamo wind-up animation)"),this.setAnimationState("jump"),this.isGrounded=!1}triggerDodgeRoll(t){console.log("Dodge roll triggered (Mixamo animation + camera rotation)"),this.setAnimationState("dodge")}setAnimationState(t){if(this.currentAnimationState!==t){console.log(`Animation transition: ${this.currentAnimationState} -> ${t} (blend: ${this.animationBlendTime}s)`),this.currentAnimationState=t;const e=this.animationStates[t];e&&console.log(`Loading animation: ${e} (Mixamo)`)}}updateMountAnimation(t,e){console.log(`Mount blend progress: ${(e*100).toFixed(1)}%`)}update(t,e){if(this.character&&this.updateCameraFollow(this.character.position,t),e.velocity&&e.weapon&&this.updateWeaponSway(e.weapon,e.velocity,t),!this.isGrounded&&e.isGrounded?(this.handleLandingImpact(this.fallVelocity),this.isGrounded=!0):e.isGrounded||(this.isGrounded=!1),e.isGrounded){const a=e.velocity?e.velocity.length():0;a<.1?this.setAnimationState("idle"):a<3?this.setAnimationState("walk"):this.setAnimationState("run")}else(e.velocity?e.velocity.y:0)>0?this.setAnimationState("jump"):this.setAnimationState("fall")}}export{n as SmoothAnimationSystem};
