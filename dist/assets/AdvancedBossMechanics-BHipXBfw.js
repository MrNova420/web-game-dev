import{l as d}from"./index-Bf-_4h4A.js";import"./three-DTQjiZ7L.js";import"./cannon-DPZWuR6y.js";class m{constructor(t){this.gameEngine=t,this.activeBosses=new Map,this.phaseTransitions=[],this.patterns=this.createPatterns()}initializeBoss(t){const e={boss:t,currentPhase:1,maxPhases:3,phaseThresholds:[.66,.33],isTransitioning:!1,transitionTimer:0,transitionDuration:3,phaseData:{1:{pattern:"standard",abilityRate:5,moveSpeed:1,abilities:["melee","charge"]},2:{pattern:"aggressive",abilityRate:3,moveSpeed:1.3,abilities:["melee","charge","aoe_slam","summon_adds"]},3:{pattern:"enrage",abilityRate:2,moveSpeed:1.5,abilities:["melee","charge","aoe_slam","summon_adds","beam","teleport"]}},abilityTimer:0,lastAbility:null,abilityQueue:[],addSpawnTimer:0,addSpawnInterval:15,maxAdds:5,currentAdds:[],currentTelegraph:null,telegraphTimer:0,isInvulnerable:!1,invulnerabilityTimer:0,enrageTimer:0,enrageActive:!1,damageDealt:0,abilitiesUsed:0,phasesCompleted:0};this.activeBosses.set(t,e),this.applyPhaseModifiers(t,e),this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createBossEffect(t.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("boss_roar")}update(t,e,a){for(const[i,s]of this.activeBosses){if(!i||i.health<=0){this.onBossDefeated(i,s);continue}const n=i.health/i.maxHealth;if(this.checkPhaseTransition(i,s,n),s.isTransitioning){this.updatePhaseTransition(i,s,t);continue}this.updateAbilities(i,s,t,e,a),this.updateAdds(i,s,t,e,a),this.updateTelegraphs(i,s,t),this.updateSpecialMechanics(i,s,t)}}checkPhaseTransition(t,e,a){if(e.isTransitioning)return;const i=e.currentPhase,s=e.phaseThresholds[i-1];s&&a<=s&&this.startPhaseTransition(t,e)}startPhaseTransition(t,e){e.isTransitioning=!0,e.transitionTimer=0,e.isInvulnerable=!0,e.currentPhase++,e.phasesCompleted++,this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createLevelUpEffect(t.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("boss_phase"),this.showPhaseNotification(e.currentPhase)}updatePhaseTransition(t,e,a){e.transitionTimer+=a;const i=Math.sin(e.transitionTimer*5)*.2+1;t.mesh&&t.mesh.scale.setScalar(t.scale*i),e.transitionTimer>=e.transitionDuration&&(e.isTransitioning=!1,e.isInvulnerable=!1,this.applyPhaseModifiers(t,e),e.currentPhase===3&&(e.enrageActive=!0))}applyPhaseModifiers(t,e){const a=e.phaseData[e.currentPhase];a&&(t.baseSpeed=t.baseSpeed||t.speed,t.speed=t.baseSpeed*a.moveSpeed,t.ai&&(t.ai.aggroDecayRate*=.7))}updateAbilities(t,e,a,i,s){const n=e.phaseData[e.currentPhase];n&&(e.abilityTimer+=a,e.abilityTimer>=n.abilityRate&&(e.abilityTimer=0,this.useRandomAbility(t,e,i,s)))}useRandomAbility(t,e,a,i){const n=e.phaseData[e.currentPhase].abilities.filter(l=>l!==e.lastAbility),o=n[Math.floor(Math.random()*n.length)];switch(e.lastAbility=o,e.abilitiesUsed++,o){case"melee":this.executeMeleeAttack(t,e,a);break;case"charge":this.executeCharge(t,e,a);break;case"aoe_slam":this.executeAOESlam(t,e,a);break;case"summon_adds":this.executeSummonAdds(t,e,i);break;case"beam":this.executeBeam(t,e,a);break;case"teleport":this.executeTeleport(t,e,a);break}}executeMeleeAttack(t,e,a){if(t.position.distanceTo(a.position)<5){const s=t.damage*1.5;a.takeDamage(s),e.damageDealt+=s,this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createHitEffect(a.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("attack")}}executeCharge(t,e,a){e.currentTelegraph={type:"charge",direction:a.position.clone().sub(t.position).normalize(),duration:1.5,timer:0,startPos:t.position.clone()},this.showTelegraph(t.position,"charge")}executeAOESlam(t,e,a){e.currentTelegraph={type:"aoe_slam",radius:10,duration:2,timer:0,position:t.position.clone()},this.showTelegraph(t.position,"aoe")}executeSummonAdds(t,e,a){if(e.currentAdds.length>=e.maxAdds)return;const i=Math.min(2,e.maxAdds-e.currentAdds.length);for(let s=0;s<i;s++){const n=Math.PI*2/i*s,o=5,l=t.position.clone();l.x+=Math.cos(n)*o,l.z+=Math.sin(n)*o;const r={position:l,health:50,maxHealth:50,damage:10,isBossAdd:!0,bossOwner:t};e.currentAdds.push(r),this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createTeleportEffect(l)}this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("summon")}executeBeam(t,e,a){e.currentTelegraph={type:"beam",direction:a.position.clone().sub(t.position).normalize(),duration:3,timer:0,startPos:t.position.clone()},this.showTelegraph(t.position,"beam")}executeTeleport(t,e,a){const i=Math.random()*Math.PI*2,s=15;t.position.x=a.position.x+Math.cos(i)*s,t.position.z=a.position.z+Math.sin(i)*s,t.mesh&&t.mesh.position.copy(t.position),this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createTeleportEffect(t.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("teleport")}updateTelegraphs(t,e,a){if(!e.currentTelegraph)return;const i=e.currentTelegraph;i.timer+=a,i.timer>=i.duration&&(this.executeTelegraphedAttack(t,e,i),e.currentTelegraph=null)}executeTelegraphedAttack(t,e,a){const i=this.gameEngine.player;switch(a.type){case"charge":if(t.velocity=a.direction.multiplyScalar(20),setTimeout(()=>{t.velocity.set(0,0,0)},500),t.position.distanceTo(i.position)<3){const r=t.damage*2;i.takeDamage(r),e.damageDealt+=r}break;case"aoe_slam":const s=t.position.distanceTo(i.position);if(s<a.radius){const r=t.damage*2.5*(1-s/a.radius);i.takeDamage(r),e.damageDealt+=r}this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createExplosionEffect(a.position);break;case"beam":const n=i.position.clone().sub(a.startPos),o=n.dot(a.direction);if(n.clone().sub(a.direction.clone().multiplyScalar(o)).length()<2&&o>0&&o<30){const r=t.damage*3;i.takeDamage(r),e.damageDealt+=r}break}this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("explosion")}updateAdds(t,e,a,i,s){e.currentAdds=e.currentAdds.filter(n=>n.health>0),e.currentPhase>=2&&(e.addSpawnTimer+=a,e.addSpawnTimer>=e.addSpawnInterval&&(e.addSpawnTimer=0,this.executeSummonAdds(t,e,s)))}updateSpecialMechanics(t,e,a){if(e.isInvulnerable&&(e.invulnerabilityTimer+=a,e.invulnerabilityTimer>=3&&(e.isInvulnerable=!1,e.invulnerabilityTimer=0)),e.enrageActive){e.enrageTimer+=a;const i=1+e.enrageTimer*.05;t.baseDamage=t.baseDamage||t.damage,t.damage=t.baseDamage*i}}showTelegraph(t,e){d.info(`Telegraph: ${e} at`,t)}showPhaseNotification(t){d.info(`Boss entering Phase ${t}!`)}onBossDefeated(t,e){this.activeBosses.delete(t),this.gameEngine.achievementSystem&&this.gameEngine.achievementSystem.onBossDefeated(!0,e.currentPhase),e.phasesCompleted*100,e.currentAdds.forEach(a=>{a.health=0})}onBossDamaged(t,e){const a=this.activeBosses.get(t);if(a)return a.isInvulnerable?0:e}createPatterns(){return{standard:{sequence:["melee","melee","charge"],loop:!0},aggressive:{sequence:["charge","aoe_slam","melee","summon_adds"],loop:!0},enrage:{sequence:["beam","teleport","aoe_slam","charge"],loop:!0}}}getActiveBossCount(){return this.activeBosses.size}getBossMechanics(t){return this.activeBosses.get(t)}}export{m as AdvancedBossMechanics};
