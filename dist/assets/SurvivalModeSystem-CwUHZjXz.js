import{V as o}from"./three-DTQjiZ7L.js";class r{constructor(e){this.scene=e,this.active=!1,this.assets={arenas:{forest:"/assets/models/arenas/survival_forest.glb",desert:"/assets/models/arenas/survival_desert.glb",ice:"/assets/models/arenas/survival_ice.glb",volcano:"/assets/models/arenas/survival_volcano.glb",tech:"/assets/models/arenas/survival_tech.glb",void:"/assets/models/arenas/survival_void.glb"},enemies:{basic:"/assets/models/monsters/survival_basic.glb",fast:"/assets/models/monsters/survival_fast.glb",tank:"/assets/models/monsters/survival_tank.glb",ranged:"/assets/models/monsters/survival_ranged.glb",exploder:"/assets/models/monsters/survival_exploder.glb",healer:"/assets/models/monsters/survival_healer.glb",summoner:"/assets/models/monsters/survival_summoner.glb",elite:"/assets/models/monsters/survival_elite.glb"},bosses:{wave5:"/assets/models/bosses/mini_boss_1.glb",wave10:"/assets/models/bosses/mega_boss_1.glb",wave15:"/assets/models/bosses/mini_boss_2.glb",wave20:"/assets/models/bosses/mega_boss_2.glb",wave25:"/assets/models/bosses/ultimate_boss.glb"},powerups:{health:"/assets/ui/icons/health_pickup.png",shield:"/assets/ui/icons/shield_pickup.png",damage:"/assets/ui/icons/damage_boost.png",speed:"/assets/ui/icons/speed_boost.png",freeze:"/assets/ui/icons/freeze_time.png",nuke:"/assets/ui/icons/nuke.png"},weaponDrops:["/assets/models/weapons/sword_legendary.glb","/assets/models/weapons/bow_legendary.glb","/assets/models/weapons/staff_legendary.glb","/assets/models/weapons/hammer_legendary.glb"]},this.wave=0,this.enemiesKilled=0,this.score=0,this.survivalTime=0,this.currentArena="forest",this.enemies=[],this.powerups=[],this.weaponDrops=[],this.waveConfig={baseEnemyCount:5,enemyCountIncrease:3,baseEnemyHealth:100,healthIncrease:25,baseDamage:10,damageIncrease:5,spawnDelay:2,eliteWaveInterval:5,bossWaveInterval:10,powerupDropChance:.15,weaponDropChance:.05},this.enemyTypes=[{type:"basic",model:this.assets.enemies.basic,health:100,damage:10,speed:3,spawnWeight:40,description:"Standard melee enemy"},{type:"fast",model:this.assets.enemies.fast,health:50,damage:8,speed:6,spawnWeight:25,description:"Quick, low health attacker"},{type:"tank",model:this.assets.enemies.tank,health:300,damage:15,speed:1.5,spawnWeight:15,description:"Slow, high health brute"},{type:"ranged",model:this.assets.enemies.ranged,health:75,damage:12,speed:2.5,spawnWeight:20,description:"Attacks from distance"},{type:"exploder",model:this.assets.enemies.exploder,health:60,damage:30,speed:4,spawnWeight:10,description:"Explodes on death or proximity"},{type:"healer",model:this.assets.enemies.healer,health:120,damage:5,speed:2,spawnWeight:5,description:"Heals nearby enemies"},{type:"summoner",model:this.assets.enemies.summoner,health:150,damage:8,speed:2.5,spawnWeight:5,description:"Spawns additional enemies"},{type:"elite",model:this.assets.enemies.elite,health:500,damage:25,speed:3.5,spawnWeight:3,description:"Powerful elite enemy"}],this.bossEncounters=[{wave:5,name:"Void Stalker",model:this.assets.bosses.wave5,health:2e3,damage:30,abilities:["charge","slam","roar"],reward:{score:1e3,powerup:"health"}},{wave:10,name:"Inferno Titan",model:this.assets.bosses.wave10,health:5e3,damage:50,abilities:["fireball","meteor","flame_aura","lava_pool"],reward:{score:3e3,powerup:"shield",weaponDrop:!0}},{wave:15,name:"Frost Queen",model:this.assets.bosses.wave15,health:8e3,damage:60,abilities:["ice_shard","blizzard","freeze","ice_clone"],reward:{score:5e3,powerup:"damage"}},{wave:20,name:"Thunder Lord",model:this.assets.bosses.wave20,health:12e3,damage:80,abilities:["lightning_strike","chain_lightning","teleport","storm"],reward:{score:8e3,powerup:"speed",weaponDrop:!0}},{wave:25,name:"Omega Destroyer",model:this.assets.bosses.wave25,health:2e4,damage:100,abilities:["laser_beam","missiles","shield","nuke","summon_minions"],reward:{score:15e3,powerup:"nuke",weaponDrop:!0}}],this.arenaProgression=[{wave:1,arena:"forest"},{wave:6,arena:"desert"},{wave:11,arena:"ice"},{wave:16,arena:"volcano"},{wave:21,arena:"tech"},{wave:26,arena:"void"}],this.activeBuffs={damageMultiplier:1,speedMultiplier:1,shield:!1,freezeTime:!1,invincibility:!1},this.personalBest={highestWave:0,mostKills:0,longestTime:0,highScore:0},this.initialize()}initialize(){console.log("üõ°Ô∏è  Survival Mode System initialized"),console.log("   Using Quaternius + Sketchfab Free + Kenney")}startSurvival(){console.log("üõ°Ô∏è  Starting Survival Mode"),this.active=!0,this.wave=0,this.enemiesKilled=0,this.score=0,this.survivalTime=0,this.enemies=[],this.loadArena(this.currentArena),this.startNextWave()}loadArena(e){console.log(`üèüÔ∏è  Loading arena: ${e} (Quaternius Arena Pack)`),this.currentArena=e}startNextWave(){this.wave++,console.log(`
üåä WAVE ${this.wave} STARTING`);const e=this.arenaProgression.find(a=>a.wave===this.wave);e&&(console.log(`üèüÔ∏è  Arena changing to: ${e.arena}`),this.loadArena(e.arena));const s=this.bossEncounters.find(a=>a.wave===this.wave);if(s){console.log(`üëπ BOSS WAVE: ${s.name}`),this.spawnBoss(s);return}if(this.wave%this.waveConfig.eliteWaveInterval===0){console.log("‚≠ê ELITE WAVE"),this.spawnEliteWave();return}this.spawnNormalWave()}spawnNormalWave(){const e=this.waveConfig.baseEnemyCount+(this.wave-1)*this.waveConfig.enemyCountIncrease;console.log(`   Spawning ${e} enemies`),console.log("   Using Quaternius Monster Pack models");for(let s=0;s<e;s++){const a=this.selectRandomEnemyType();this.spawnEnemy(a,this.wave)}}spawnEliteWave(){const e=Math.floor(this.wave/5)+2;console.log(`   Spawning ${e} elite enemies`);for(let a=0;a<e;a++){const t=this.enemyTypes.find(i=>i.type==="elite");this.spawnEnemy(t,this.wave)}const s=Math.floor(e/2);for(let a=0;a<s;a++){const t=this.selectRandomEnemyType();this.spawnEnemy(t,this.wave)}}spawnBoss(e){console.log(`   Boss: ${e.name}`),console.log(`   Health: ${e.health}, Abilities: ${e.abilities.join(", ")}`),console.log(`   Model: ${e.model} (Sketchfab Free)`);const s={type:"boss",name:e.name,model:e.model,health:e.health,maxHealth:e.health,damage:e.damage,abilities:e.abilities,position:new o(0,0,0),state:"spawning",reward:e.reward};this.enemies.push(s)}spawnEnemy(e,s){const a=e.health+(s-1)*this.waveConfig.healthIncrease,t=e.damage+(s-1)*this.waveConfig.damageIncrease,i={type:e.type,model:e.model,health:a,maxHealth:a,damage:t,speed:e.speed,position:this.getRandomSpawnPosition(),state:"spawning"};this.enemies.push(i)}selectRandomEnemyType(){const e=this.enemyTypes.reduce((a,t)=>a+t.spawnWeight,0);let s=Math.random()*e;for(const a of this.enemyTypes)if(s-=a.spawnWeight,s<=0)return a;return this.enemyTypes[0]}getRandomSpawnPosition(){const e=Math.random()*Math.PI*2,s=20+Math.random()*10;return new o(Math.cos(e)*s,0,Math.sin(e)*s)}update(e){this.active&&(this.survivalTime+=e,this.updateEnemies(e),this.updatePowerups(e),this.updateBuffs(e),this.enemies.length===0&&this.onWaveComplete())}updateEnemies(e){for(let s=this.enemies.length-1;s>=0;s--){const a=this.enemies[s];a.health<=0&&(this.onEnemyKilled(a),this.enemies.splice(s,1))}}updatePowerups(e){}updateBuffs(e){}onEnemyKilled(e){this.enemiesKilled++;let s=10;e.type==="elite"&&(s=100),e.type==="boss"&&(s=e.reward.score),this.score+=s*this.wave,Math.random()<this.waveConfig.powerupDropChance&&this.dropPowerup(e.position),Math.random()<this.waveConfig.weaponDropChance&&this.dropWeapon(e.position),e.type==="boss"&&this.grantBossRewards(e.reward)}dropPowerup(e){const s=Object.keys(this.assets.powerups),a=s[Math.floor(Math.random()*s.length)];console.log(`üíä Powerup dropped: ${a}`),this.powerups.push({type:a,position:e.clone(),sprite:this.assets.powerups[a]})}dropWeapon(e){const s=this.assets.weaponDrops[Math.floor(Math.random()*this.assets.weaponDrops.length)];console.log(`‚öîÔ∏è  Weapon dropped: ${s}`),this.weaponDrops.push({model:s,position:e.clone()})}grantBossRewards(e){console.log("üéÅ Boss rewards granted:"),console.log(`   Score: +${e.score}`),this.score+=e.score,e.powerup&&(console.log(`   Powerup: ${e.powerup}`),this.activatePowerup(e.powerup)),e.weaponDrop&&(console.log("   Legendary Weapon Drop!"),this.dropWeapon(new o(0,0,0)))}activatePowerup(e){switch(console.log(`üíä Powerup activated: ${e}`),e){case"health":break;case"shield":this.activeBuffs.shield=!0,setTimeout(()=>this.activeBuffs.shield=!1,1e4);break;case"damage":this.activeBuffs.damageMultiplier=2,setTimeout(()=>this.activeBuffs.damageMultiplier=1,15e3);break;case"speed":this.activeBuffs.speedMultiplier=1.5,setTimeout(()=>this.activeBuffs.speedMultiplier=1,15e3);break;case"freeze":this.activeBuffs.freezeTime=!0,setTimeout(()=>this.activeBuffs.freezeTime=!1,5e3);break;case"nuke":this.nukeAllEnemies();break}}nukeAllEnemies(){console.log("üí• NUKE ACTIVATED - All enemies destroyed!");const e=this.enemies.length;this.enemiesKilled+=e,this.score+=e*50*this.wave,this.enemies=[]}onWaveComplete(){console.log(`‚úÖ Wave ${this.wave} complete!`),console.log(`   Enemies killed: ${this.enemiesKilled}`),console.log(`   Score: ${this.score}`),console.log(`   Time: ${Math.floor(this.survivalTime)}s`),setTimeout(()=>this.startNextWave(),3e3)}gameOver(){console.log(`
üíÄ SURVIVAL MODE - GAME OVER`),console.log(`   Final Wave: ${this.wave}`),console.log(`   Total Kills: ${this.enemiesKilled}`),console.log(`   Final Score: ${this.score}`),console.log(`   Survival Time: ${Math.floor(this.survivalTime)}s`),this.wave>this.personalBest.highestWave&&(console.log("üèÜ NEW RECORD: Highest Wave!"),this.personalBest.highestWave=this.wave),this.enemiesKilled>this.personalBest.mostKills&&(console.log("üèÜ NEW RECORD: Most Kills!"),this.personalBest.mostKills=this.enemiesKilled),this.survivalTime>this.personalBest.longestTime&&(console.log("üèÜ NEW RECORD: Longest Survival!"),this.personalBest.longestTime=this.survivalTime),this.score>this.personalBest.highScore&&(console.log("üèÜ NEW RECORD: High Score!"),this.personalBest.highScore=this.score),this.active=!1}getStats(){return{active:this.active,wave:this.wave,enemiesKilled:this.enemiesKilled,score:this.score,survivalTime:Math.floor(this.survivalTime),arena:this.currentArena,enemiesRemaining:this.enemies.length,activeBuffs:this.activeBuffs,personalBest:this.personalBest,source:"Quaternius Monster Pack + Sketchfab Free + Kenney"}}}export{r as SurvivalModeSystem};
