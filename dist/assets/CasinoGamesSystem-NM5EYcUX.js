class p{constructor(t){this.gameEngine=t,this.chips=1e3,this.totalWinnings=0,this.totalLosses=0,this.activeGames=new Map,this.stats={blackjackGames:0,blackjackWins:0,slotsSpins:0,slotsWins:0,pokerHands:0,pokerWins:0,biggestWin:0,biggestLoss:0},this.slotSymbols=["🍒","🍋","🍊","🍇","💎","7️⃣","🔔","⭐"],this.slotPayouts={"🍒🍒🍒":5,"🍋🍋🍋":10,"🍊🍊🍊":15,"🍇🍇🍇":20,"💎💎💎":50,"7️⃣7️⃣7️⃣":100,"🔔🔔🔔":75,"⭐⭐⭐":150}}startBlackjack(t){if(t>this.chips)return{success:!1,message:"Not enough chips"};if(t<10)return{success:!1,message:"Minimum bet is 10 chips"};const s=`blackjack_${Date.now()}`,a=this.createDeck();this.shuffleDeck(a);const e={id:s,type:"blackjack",bet:t,deck:a,playerHand:[],dealerHand:[],stage:"dealing",result:null};return e.playerHand.push(this.drawCard(e.deck)),e.dealerHand.push(this.drawCard(e.deck)),e.playerHand.push(this.drawCard(e.deck)),e.dealerHand.push(this.drawCard(e.deck)),e.stage="player_turn",this.chips-=t,this.calculateHandValue(e.playerHand)===21?this.resolveBlackjack(s):(this.activeGames.set(s,e),this.stats.blackjackGames++,{success:!0,gameId:s,playerHand:e.playerHand,dealerUpCard:e.dealerHand[0],playerValue:this.calculateHandValue(e.playerHand)})}blackjackHit(t){const s=this.activeGames.get(t);if(!s||s.type!=="blackjack"||s.stage!=="player_turn")return{success:!1,message:"Invalid game state"};s.playerHand.push(this.drawCard(s.deck));const a=this.calculateHandValue(s.playerHand);return a>21?(s.stage="complete",s.result="bust",this.totalLosses+=s.bet,s.bet>this.stats.biggestLoss&&(this.stats.biggestLoss=s.bet),{success:!0,playerHand:s.playerHand,playerValue:a,result:"bust",chips:this.chips}):{success:!0,playerHand:s.playerHand,playerValue:a}}blackjackStand(t){const s=this.activeGames.get(t);if(!s||s.type!=="blackjack"||s.stage!=="player_turn")return{success:!1,message:"Invalid game state"};for(s.stage="dealer_turn";this.calculateHandValue(s.dealerHand)<17;)s.dealerHand.push(this.drawCard(s.deck));return this.resolveBlackjack(t)}resolveBlackjack(t){const s=this.activeGames.get(t);if(!s)return null;const a=this.calculateHandValue(s.playerHand),e=this.calculateHandValue(s.dealerHand);let i=0,l;a===21&&s.playerHand.length===2?(l="blackjack",i=s.bet*2.5):e>21?(l="dealer_bust",i=s.bet*2):a>e?(l="win",i=s.bet*2):a===e?(l="push",i=s.bet):(l="loss",i=0),this.chips+=i;const r=i-s.bet;return r>0?(this.totalWinnings+=r,this.stats.blackjackWins++,r>this.stats.biggestWin&&(this.stats.biggestWin=r)):r<0&&(this.totalLosses+=Math.abs(r)),s.stage="complete",s.result=l,s.winnings=i,this.activeGames.delete(t),{success:!0,result:l,playerHand:s.playerHand,dealerHand:s.dealerHand,playerValue:a,dealerValue:e,winnings:i,profit:r,chips:this.chips}}spinSlots(t){if(t>this.chips)return{success:!1,message:"Not enough chips"};if(t<1)return{success:!1,message:"Minimum bet is 1 chip"};this.chips-=t,this.stats.slotsSpins++;const s=this.slotSymbols[Math.floor(Math.random()*this.slotSymbols.length)],a=this.slotSymbols[Math.floor(Math.random()*this.slotSymbols.length)],e=this.slotSymbols[Math.floor(Math.random()*this.slotSymbols.length)],i=`${s}${a}${e}`,l=this.slotPayouts[i]||0,r=l*t;this.chips+=r;const o=r-t;return r>0?(this.stats.slotsWins++,this.totalWinnings+=o,o>this.stats.biggestWin&&(this.stats.biggestWin=o)):this.totalLosses+=t,{success:!0,reels:[s,a,e],payout:l,winnings:r,profit:o,chips:this.chips}}startPoker(t){if(t>this.chips)return{success:!1,message:"Not enough chips"};if(t<20)return{success:!1,message:"Minimum bet is 20 chips"};const s=`poker_${Date.now()}`,a=this.createDeck();this.shuffleDeck(a);const e={id:s,type:"poker",bet:t,deck:a,hand:[],discarded:[],stage:"initial_deal"};for(let i=0;i<5;i++)e.hand.push(this.drawCard(e.deck));return e.stage="draw",this.chips-=t,this.activeGames.set(s,e),this.stats.pokerHands++,{success:!0,gameId:s,hand:e.hand}}pokerDraw(t,s){const a=this.activeGames.get(t);if(!a||a.type!=="poker"||a.stage!=="draw")return{success:!1,message:"Invalid game state"};for(const e of s)e>=0&&e<a.hand.length&&(a.discarded.push(a.hand[e]),a.hand[e]=this.drawCard(a.deck));return this.resolvePoker(t)}resolvePoker(t){const s=this.activeGames.get(t);if(!s)return null;const a=this.evaluatePokerHand(s.hand),i={"Royal Flush":800,"Straight Flush":50,"Four of a Kind":25,"Full House":9,Flush:6,Straight:4,"Three of a Kind":3,"Two Pair":2,"Pair (Jacks or Better)":1}[a]||0,l=i*s.bet;this.chips+=l;const r=l-s.bet;return l>0?(this.stats.pokerWins++,this.totalWinnings+=r,r>this.stats.biggestWin&&(this.stats.biggestWin=r)):this.totalLosses+=s.bet,s.stage="complete",this.activeGames.delete(t),{success:!0,hand:s.hand,handRank:a,payout:i,winnings:l,profit:r,chips:this.chips}}createDeck(){const t=["♠","♥","♦","♣"],s=["A","2","3","4","5","6","7","8","9","10","J","Q","K"],a=[];for(const e of t)for(const i of s)a.push({rank:i,suit:e});return a}shuffleDeck(t){for(let s=t.length-1;s>0;s--){const a=Math.floor(Math.random()*(s+1));[t[s],t[a]]=[t[a],t[s]]}}drawCard(t){return t.pop()}calculateHandValue(t){let s=0,a=0;for(const e of t)e.rank==="A"?(a++,s+=11):["J","Q","K"].includes(e.rank)?s+=10:s+=parseInt(e.rank);for(;s>21&&a>0;)s-=10,a--;return s}evaluatePokerHand(t){const s=t.map(n=>n.rank),a=t.map(n=>n.suit),e={};for(const n of s)e[n]=(e[n]||0)+1;const i=Object.values(e).sort((n,c)=>c-n),l=a.every(n=>n===a[0]),r={A:14,K:13,Q:12,J:11};for(let n=2;n<=10;n++)r[n.toString()]=n;const o=s.map(n=>r[n]).sort((n,c)=>n-c),h=o.every((n,c)=>c===0||n===o[c-1]+1);return h&&l&&o[0]===10?"Royal Flush":h&&l?"Straight Flush":i[0]===4?"Four of a Kind":i[0]===3&&i[1]===2?"Full House":l?"Flush":h?"Straight":i[0]===3?"Three of a Kind":i[0]===2&&i[1]===2?"Two Pair":i[0]===2&&["J","Q","K","A"].includes(Object.keys(e).find(n=>e[n]===2))?"Pair (Jacks or Better)":"High Card"}buyChips(t){const s=t;if(this.gameEngine.economySystem){if(!this.gameEngine.economySystem.canAfford(s))return{success:!1,message:"Not enough gold"};this.gameEngine.economySystem.spendGold(s)}return this.chips+=t,{success:!0,chips:this.chips}}cashOutChips(t){return t>this.chips?{success:!1,message:"Not enough chips"}:(this.chips-=t,this.gameEngine.economySystem&&this.gameEngine.economySystem.addGold(t),{success:!0,chips:this.chips,gold:t})}getStats(){return{chips:this.chips,totalWinnings:this.totalWinnings,totalLosses:this.totalLosses,netProfit:this.totalWinnings-this.totalLosses,...this.stats}}save(){const t={chips:this.chips,totalWinnings:this.totalWinnings,totalLosses:this.totalLosses,stats:this.stats};localStorage.setItem("casino_data",JSON.stringify(t))}load(){const t=localStorage.getItem("casino_data");if(t)try{const s=JSON.parse(t);this.chips=s.chips||1e3,this.totalWinnings=s.totalWinnings||0,this.totalLosses=s.totalLosses||0,this.stats=s.stats||this.stats}catch(s){console.error("Failed to load casino data:",s)}}}export{p as CasinoGamesSystem};
