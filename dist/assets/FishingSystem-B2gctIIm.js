class o{constructor(t){this.gameEngine=t,this.isFishing=!1,this.currentCast=null,this.caughtFish=new Map,this.fishingLevel=1,this.fishingXP=0,this.fishingXPToNext=100,this.rod={tier:1,catchBonus:0,rarityBonus:0},this.bait=null,this.fishDatabase=this.createFishDatabase(),this.fishingSpots=new Map,this.currentSpot=null}createFishDatabase(){return{minnow:{name:"Minnow",rarity:"common",value:5,xp:5,weight:[.1,.3]},carp:{name:"Carp",rarity:"common",value:10,xp:10,weight:[.5,2]},trout:{name:"Trout",rarity:"common",value:15,xp:12,weight:[.3,1.5]},bass:{name:"Bass",rarity:"uncommon",value:30,xp:25,weight:[1,4],minLevel:5},pike:{name:"Pike",rarity:"uncommon",value:40,xp:30,weight:[2,8],minLevel:8},salmon:{name:"Salmon",rarity:"uncommon",value:50,xp:35,weight:[3,10],minLevel:10},sturgeon:{name:"Sturgeon",rarity:"rare",value:100,xp:75,weight:[10,50],minLevel:20},marlin:{name:"Marlin",rarity:"rare",value:150,xp:100,weight:[50,200],minLevel:25},tuna:{name:"Tuna",rarity:"rare",value:120,xp:85,weight:[30,100],minLevel:22},golden_koi:{name:"Golden Koi",rarity:"epic",value:500,xp:250,weight:[2,5],minLevel:40},dragon_fish:{name:"Dragon Fish",rarity:"epic",value:750,xp:400,weight:[20,80],minLevel:50},leviathan:{name:"Leviathan",rarity:"legendary",value:5e3,xp:2e3,weight:[500,2e3],minLevel:75},kraken:{name:"Kraken",rarity:"legendary",value:1e4,xp:5e3,weight:[1e3,5e3],minLevel:90}}}startFishing(t){if(this.isFishing)return{success:!1,message:"Already fishing"};const e=this.fishingSpots.get(t)||this.getDefaultSpot();this.currentSpot=e,this.isFishing=!0;const i=`cast_${Date.now()}`;return this.currentCast={id:i,spotId:t,startTime:Date.now(),biteTime:this.calculateBiteTime(),hasBite:!1,hooked:!1},{success:!0,castId:i,biteTime:this.currentCast.biteTime}}calculateBiteTime(){const t=3e3+Math.random()*7e3,e=this.rod.tier*500,i=this.bait?1e3:0;return Math.max(1e3,t-e-i)}update(t){if(!this.isFishing||!this.currentCast)return;const e=Date.now()-this.currentCast.startTime;!this.currentCast.hasBite&&e>=this.currentCast.biteTime&&(this.currentCast.hasBite=!0,this.triggerBite()),this.currentCast.hasBite&&!this.currentCast.hooked&&e>this.currentCast.biteTime+3e3&&this.failCatch()}triggerBite(){this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSound("fishing_bite"),console.log("🎣 Bite! Press the button to hook!")}hook(){if(!this.isFishing||!this.currentCast||!this.currentCast.hasBite)return{success:!1,message:"No bite yet"};if(this.currentCast.hooked)return{success:!1,message:"Already hooked"};const e=Date.now()-this.currentCast.startTime-this.currentCast.biteTime;return e<0||e>2e3?this.failCatch():(this.currentCast.hooked=!0,this.currentCast.reelingStartTime=Date.now(),this.currentCast.reelingProgress=0,this.currentCast.reelingTarget=100,{success:!0,message:"Hooked! Start reeling!"})}reel(t=1){if(!this.currentCast||!this.currentCast.hooked)return{success:!1,message:"Nothing hooked"};const e=t*(1+this.rod.catchBonus);return this.currentCast.reelingProgress+=e*5,this.currentCast.reelingProgress>=this.currentCast.reelingTarget?this.catchFish():{success:!0,progress:this.currentCast.reelingProgress,target:this.currentCast.reelingTarget}}catchFish(){if(!this.currentCast)return null;const t=this.determineFish();if(!t)return this.failCatch();const e=this.fishDatabase[t.id],i=e.weight[0]+Math.random()*(e.weight[1]-e.weight[0]),s={id:t.id,name:e.name,rarity:e.rarity,weight:i,value:Math.floor(e.value*(1+i/10)),timestamp:Date.now()};return this.caughtFish.set(t.id,(this.caughtFish.get(t.id)||0)+1),this.addFishingXP(e.xp),this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.addItem(s),this.isFishing=!1,this.currentCast=null,console.log(`🎣 Caught ${s.name}! Weight: ${i.toFixed(2)}kg`),{success:!0,fish:s}}determineFish(){const t=[];for(const[e,i]of Object.entries(this.fishDatabase)){if(i.minLevel&&this.fishingLevel<i.minLevel||this.currentSpot&&this.currentSpot.fishTypes&&!this.currentSpot.fishTypes.includes(e))continue;const n={common:50,uncommon:25,rare:15,epic:8,legendary:2}[i.rarity]||10,a=this.rod.rarityBonus*(i.rarity==="rare"||i.rarity==="epic"?5:0);for(let r=0;r<n+a;r++)t.push({id:e,data:i})}return t.length===0?null:t[Math.floor(Math.random()*t.length)]}failCatch(){return console.log("❌ The fish got away!"),this.isFishing=!1,this.currentCast=null,{success:!1,message:"Fish got away"}}addFishingXP(t){for(this.fishingXP+=t;this.fishingXP>=this.fishingXPToNext;)this.fishingXP-=this.fishingXPToNext,this.fishingLevel++,this.fishingXPToNext=Math.floor(this.fishingXPToNext*1.5),console.log(`🎣 Fishing Level Up! Now level ${this.fishingLevel}`)}upgradeRod(t){const e=t*500;return this.gameEngine.economySystem&&!this.gameEngine.economySystem.canAfford(e)?{success:!1,message:"Not enough gold"}:(this.gameEngine.economySystem&&this.gameEngine.economySystem.spendGold(e),this.rod={tier:t,catchBonus:(t-1)*.1,rarityBonus:t-1},{success:!0})}useBait(t){return this.bait=t,{success:!0}}getDefaultSpot(){return{id:"default",name:"Default Pond",fishTypes:["minnow","carp","trout","bass"]}}getStats(){return{fishingLevel:this.fishingLevel,fishingXP:this.fishingXP,fishingXPToNext:this.fishingXPToNext,totalCaught:Array.from(this.caughtFish.values()).reduce((t,e)=>t+e,0),uniqueSpecies:this.caughtFish.size,rod:this.rod}}}export{o as FishingSystem};
