class h{constructor(t){this.scene=t,this.npcs=[],this.enemies=[],this.wildlife=[],this.wanderRadius=20,this.patrolRadius=50,this.roamRadius=100,this.lastUpdate=Date.now(),this.updateInterval=1e3,this.isActive=!1}initialize(t){console.log("🌍 Initializing Living World System..."),console.log("   Making world come alive with wandering entities!"),this.initializeNPCs(t.villages),this.initializeEnemies(t.biomes),this.initializeWildlife(t.biomes),this.isActive=!0,console.log("✅ Living World System initialized!"),console.log(`   NPCs: ${this.npcs.length} wandering`),console.log(`   Enemies: ${this.enemies.length} patrolling`),console.log(`   Wildlife: ${this.wildlife.length} roaming`)}initializeNPCs(t){Object.values(t||{}).forEach(e=>{e.npcs?.forEach(i=>{const s={name:i.name,type:i.type,home:{x:i.x,y:i.y,z:i.z},current:{x:i.x,y:i.y,z:i.z},target:null,speed:.5,zone:e.name,behavior:this.getNPCBehavior(i.type),mesh:null};this.npcs.push(s)})}),console.log(`   Configured ${this.npcs.length} NPCs to wander in villages`)}getNPCBehavior(t){const e={quest_giver:{wanderChance:.3,stayNearHome:!0,radius:10,routine:"stationary"},vendor:{wanderChance:.2,stayNearHome:!0,radius:5,routine:"shopkeeper"},guard:{wanderChance:.8,stayNearHome:!0,radius:30,routine:"patrol"},villager:{wanderChance:.7,stayNearHome:!1,radius:50,routine:"wander"}};return e[t]||e.villager}initializeEnemies(t){Object.values(t||{}).forEach(e=>{e.enemySpawns?.forEach(i=>{const s={type:i.type,level:i.level,home:{x:i.x,y:i.y,z:i.z},current:{x:i.x,y:i.y,z:i.z},target:null,speed:1,zone:e.name,behavior:this.getEnemyBehavior(i.type),patrolPoints:this.generatePatrolPoints(i,5),currentPatrolIndex:0,mesh:null};this.enemies.push(s)})}),console.log(`   Configured ${this.enemies.length} enemies to patrol zones`)}getEnemyBehavior(t){const e={Skeleton_Minion:{patrolRadius:30,speed:.8,aggressive:!0,pattern:"circle"},Skeleton_Warrior:{patrolRadius:40,speed:1,aggressive:!0,pattern:"square"},Skeleton_Mage:{patrolRadius:25,speed:.6,aggressive:!1,pattern:"stationary"},Skeleton_Rogue:{patrolRadius:60,speed:1.5,aggressive:!0,pattern:"random"},Ancient_Lich:{patrolRadius:15,speed:.5,aggressive:!1,pattern:"hover"}};return e[t]||e.Skeleton_Minion}initializeWildlife(t){Object.values(t||{}).forEach(e=>{const i=this.getWildlifeCount(e),s=this.getWildlifeTypes(e);for(let r=0;r<i;r++){const o=s[Math.floor(Math.random()*s.length)],a=this.getRandomPositionInBiome(e),n={type:o,home:a,current:{...a},target:null,speed:1.2,zone:e.name,behavior:this.getWildlifeBehavior(o),mesh:null};this.wildlife.push(n)}}),console.log(`   Configured ${this.wildlife.length} wildlife to roam biomes`)}getWildlifeCount(t){return{"Mystic Forest":20,"Crimson Peaks":10,"Everlight City":5}[t.name]||15}getWildlifeTypes(t){return{"Mystic Forest":["Deer","Rabbit","Fox","Bird","Squirrel"],"Crimson Peaks":["Mountain_Goat","Eagle","Hawk","Lizard"],"Everlight City":["Pigeon","Cat","Dog","Rat"]}[t.name]||["Bird","Deer"]}getWildlifeBehavior(t){const e={Deer:{speed:1.5,fleeDistance:15,roamRadius:80,timid:!0},Rabbit:{speed:2,fleeDistance:10,roamRadius:50,timid:!0},Fox:{speed:1.8,fleeDistance:20,roamRadius:100,timid:!1},Bird:{speed:2.5,fleeDistance:8,roamRadius:150,flying:!0},Mountain_Goat:{speed:1,fleeDistance:12,roamRadius:60,climber:!0},Eagle:{speed:3,fleeDistance:5,roamRadius:200,flying:!0}};return e[t]||e.Deer}generatePatrolPoints(t,e){const i=[];for(let r=0;r<e;r++){const o=r/e*Math.PI*2;i.push({x:t.x+Math.cos(o)*40,y:t.y,z:t.z+Math.sin(o)*40})}return i}getRandomPositionInBiome(t){const e=t.position?.x||0,i=t.position?.z||0,s=500;return{x:e+(Math.random()-.5)*s,y:0,z:i+(Math.random()-.5)*s}}update(t){if(!this.isActive)return;const e=Date.now();e-this.lastUpdate<this.updateInterval||(this.lastUpdate=e,this.updateNPCs(t),this.updateEnemies(t),this.updateWildlife(t))}updateNPCs(t){this.npcs.forEach(e=>{if(Math.random()<e.behavior.wanderChance*t){const i=Math.random()*Math.PI*2,s=Math.random()*e.behavior.radius;e.target={x:e.home.x+Math.cos(i)*s,y:e.home.y,z:e.home.z+Math.sin(i)*s}}e.target&&this.moveToward(e,e.target,e.speed*t),e.mesh&&e.mesh.position.set(e.current.x,e.current.y,e.current.z)})}updateEnemies(t){this.enemies.forEach(e=>{if(!e.target&&e.patrolPoints.length>0&&(e.target=e.patrolPoints[e.currentPatrolIndex]),e.target&&this.moveToward(e,e.target,e.speed*t)&&(e.currentPatrolIndex=(e.currentPatrolIndex+1)%e.patrolPoints.length,e.target=e.patrolPoints[e.currentPatrolIndex]),e.mesh&&(e.mesh.position.set(e.current.x,e.current.y,e.current.z),e.target)){const i=e.target.x-e.current.x,s=e.target.z-e.current.z;e.mesh.rotation.y=Math.atan2(i,s)}})}updateWildlife(t){this.wildlife.forEach(e=>{if(!e.target||Math.random()<.05){const i=Math.random()*Math.PI*2,s=Math.random()*e.behavior.roamRadius;e.target={x:e.home.x+Math.cos(i)*s,y:e.home.y,z:e.home.z+Math.sin(i)*s}}if(e.target&&this.moveToward(e,e.target,e.speed*t),e.mesh&&(e.mesh.position.set(e.current.x,e.current.y,e.current.z),e.target)){const i=e.target.x-e.current.x,s=e.target.z-e.current.z;e.mesh.rotation.y=Math.atan2(i,s)}})}moveToward(t,e,i){const s=e.x-t.current.x,r=e.z-t.current.z,o=Math.sqrt(s*s+r*r);if(o<.5)return t.current.x=e.x,t.current.z=e.z,!0;const n=Math.min(i,o)/o;return t.current.x+=s*n,t.current.z+=r*n,!1}activate(){this.isActive=!0,console.log("🌍 Living World activated - entities are now moving!")}deactivate(){this.isActive=!1,console.log("🌍 Living World deactivated - entities frozen")}getStats(){return{npcs:{total:this.npcs.length,active:this.npcs.filter(t=>t.target).length,zones:[...new Set(this.npcs.map(t=>t.zone))]},enemies:{total:this.enemies.length,patrolling:this.enemies.filter(t=>t.target).length,zones:[...new Set(this.enemies.map(t=>t.zone))]},wildlife:{total:this.wildlife.length,roaming:this.wildlife.filter(t=>t.target).length,zones:[...new Set(this.wildlife.map(t=>t.zone))]}}}}export{h as LivingWorldSystem};
