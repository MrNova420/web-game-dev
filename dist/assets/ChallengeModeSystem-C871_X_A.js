class o{constructor(e){this.gameEngine=e,this.dailyChallenges=[],this.weeklyChallenges=[],this.specialChallenges=[],this.completedChallenges=new Set,this.towerProgress={currentFloor:1,highestFloor:1,attempts:0,completions:0},this.challengeTypes=this.createChallengeTypes(),this.challengePoints=0,this.challengeRank=1,this.lastDailyReset=Date.now(),this.lastWeeklyReset=Date.now(),this.generateDailyChallenges(),this.generateWeeklyChallenges()}createChallengeTypes(){return{kill_enemies:{name:"Enemy Slayer",type:"combat",description:"Defeat {count} enemies",difficulty:"easy",rewards:{gold:500,xp:100,points:10}},kill_bosses:{name:"Boss Hunter",type:"combat",description:"Defeat {count} bosses",difficulty:"hard",rewards:{gold:2e3,xp:500,points:50}},perfect_combat:{name:"Flawless Victory",type:"combat",description:"Complete a floor without taking damage",difficulty:"hard",rewards:{gold:1500,xp:300,points:40}},combo_master:{name:"Combo Master",type:"combat",description:"Achieve a {count}-hit combo",difficulty:"medium",rewards:{gold:1e3,xp:200,points:25}},collect_items:{name:"Collector",type:"collection",description:"Collect {count} items",difficulty:"easy",rewards:{gold:400,xp:80,points:8}},rare_find:{name:"Treasure Hunter",type:"collection",description:"Find a rare or better item",difficulty:"medium",rewards:{gold:1200,xp:250,points:30}},craft_items:{name:"Master Crafter",type:"crafting",description:"Craft {count} items",difficulty:"medium",rewards:{gold:800,xp:150,points:20}},brew_potions:{name:"Alchemist",type:"crafting",description:"Brew {count} potions",difficulty:"easy",rewards:{gold:600,xp:120,points:15}},speed_run:{name:"Speed Runner",type:"speed",description:"Complete 5 floors in under {time} minutes",difficulty:"hard",rewards:{gold:3e3,xp:600,points:60}},boss_rush:{name:"Boss Rush",type:"speed",description:"Defeat {count} bosses in under {time} minutes",difficulty:"expert",rewards:{gold:5e3,xp:1e3,points:100}},survive_waves:{name:"Survivor",type:"survival",description:"Survive {count} waves without healing",difficulty:"hard",rewards:{gold:2500,xp:500,points:50}},low_hp:{name:"Edge of Death",type:"survival",description:"Complete a floor with less than 10% HP",difficulty:"expert",rewards:{gold:4e3,xp:800,points:80}},no_damage:{name:"Untouchable",type:"special",description:"Complete {count} floors without taking damage",difficulty:"expert",rewards:{gold:1e4,xp:2e3,points:200}},pacifist:{name:"Pacifist",type:"special",description:"Complete a floor without killing enemies",difficulty:"expert",rewards:{gold:5e3,xp:1e3,points:100}}}}generateDailyChallenges(){this.dailyChallenges=[];const e=Object.entries(this.challengeTypes).filter(([t,l])=>l.difficulty==="easy"||l.difficulty==="medium");for(let t=0;t<3;t++){const[l,s]=e[Math.floor(Math.random()*e.length)],i=this.createChallenge(l,s,"daily");this.dailyChallenges.push(i)}}generateWeeklyChallenges(){this.weeklyChallenges=[];const e=Object.entries(this.challengeTypes).filter(([t,l])=>l.difficulty==="medium"||l.difficulty==="hard");for(let t=0;t<3;t++){const[l,s]=e[Math.floor(Math.random()*e.length)],i=this.createChallenge(l,s,"weekly");this.weeklyChallenges.push(i)}}createChallenge(e,t,l){const s={kill_enemies:50,kill_bosses:5,collect_items:30,craft_items:10,brew_potions:15,combo_master:50,survive_waves:10,speed_run:15,boss_rush:3},i={speed_run:15,boss_rush:10};return{id:`challenge_${l}_${e}_${Date.now()}`,typeId:e,name:t.name,description:t.description.replace("{count}",s[e]||10).replace("{time}",i[e]||10),type:t.type,difficulty:t.difficulty,period:l,progress:0,target:s[e]||1,timeLimit:i[e]?i[e]*60:null,rewards:t.rewards,completed:!1,startTime:Date.now()}}updateProgress(e,t=1,l={}){for(const s of this.dailyChallenges)s.typeId===e&&!s.completed&&(s.progress+=t,s.progress>=s.target&&this.completeChallenge(s));for(const s of this.weeklyChallenges)s.typeId===e&&!s.completed&&(s.progress+=t,s.progress>=s.target&&this.completeChallenge(s));for(const s of this.specialChallenges)s.typeId===e&&!s.completed&&(s.progress+=t,s.progress>=s.target&&this.completeChallenge(s))}completeChallenge(e){e.completed||(e.completed=!0,e.completedTime=Date.now(),this.completedChallenges.add(e.id),e.rewards.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addGold(e.rewards.gold),e.rewards.xp&&this.gameEngine.player&&this.gameEngine.player.addXP(e.rewards.xp),e.rewards.points&&(this.challengePoints+=e.rewards.points,this.updateRank()),console.log(`🏆 Challenge Complete: ${e.name}`),console.log(`Rewards: ${e.rewards.gold} gold, ${e.rewards.xp} XP, ${e.rewards.points} points`))}startTowerFloor(e){return e>this.towerProgress.highestFloor+1?{success:!1,message:"Must complete previous floors first"}:(this.towerProgress.currentFloor=e,this.towerProgress.attempts++,{success:!0,challenge:this.generateTowerChallenge(e)})}generateTowerChallenge(e){const t=Math.floor(e/10),l=10+e*2;return{floor:e,type:e%10===0?"boss":"combat",enemyCount:l,enemyLevel:e,timeLimit:300+e*10,rewards:{gold:100*e,xp:50*e,points:e},modifiers:this.getTowerModifiers(t)}}getTowerModifiers(e){const t=[];return e>=1&&t.push({type:"enemy_health",value:1.5}),e>=2&&t.push({type:"enemy_damage",value:1.5}),e>=3&&t.push({type:"enemy_speed",value:1.3}),e>=4&&t.push({type:"no_healing",value:!0}),e>=5&&t.push({type:"time_pressure",value:!0}),t}completeTowerFloor(e,t){if(!t)return{success:!1,message:"Floor failed"};e>this.towerProgress.highestFloor&&(this.towerProgress.highestFloor=e),this.towerProgress.completions++;const l=this.generateTowerChallenge(e);return l.rewards.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addGold(l.rewards.gold),l.rewards.xp&&this.gameEngine.player&&this.gameEngine.player.addXP(l.rewards.xp),l.rewards.points&&(this.challengePoints+=l.rewards.points,this.updateRank()),console.log(`🗼 Tower Floor ${e} Complete!`),{success:!0,rewards:l.rewards}}updateRank(){const e=[0,100,300,600,1e3,1500,2500,5e3,1e4,2e4];for(let t=e.length-1;t>=0;t--)if(this.challengePoints>=e[t]){this.challengeRank=t+1;break}}checkDailyReset(){const e=Date.now(),t=1440*60*1e3;e-this.lastDailyReset>=t&&(this.generateDailyChallenges(),this.lastDailyReset=e)}checkWeeklyReset(){const e=Date.now(),t=10080*60*1e3;e-this.lastWeeklyReset>=t&&(this.generateWeeklyChallenges(),this.lastWeeklyReset=e)}getActiveChallenges(){return this.checkDailyReset(),this.checkWeeklyReset(),{daily:this.dailyChallenges.filter(e=>!e.completed),weekly:this.weeklyChallenges.filter(e=>!e.completed),special:this.specialChallenges.filter(e=>!e.completed)}}getStats(){return{points:this.challengePoints,rank:this.challengeRank,completedCount:this.completedChallenges.size,towerProgress:this.towerProgress,dailyProgress:this.dailyChallenges.filter(e=>e.completed).length,weeklyProgress:this.weeklyChallenges.filter(e=>e.completed).length}}save(){const e={dailyChallenges:this.dailyChallenges,weeklyChallenges:this.weeklyChallenges,specialChallenges:this.specialChallenges,completedChallenges:Array.from(this.completedChallenges),towerProgress:this.towerProgress,challengePoints:this.challengePoints,challengeRank:this.challengeRank,lastDailyReset:this.lastDailyReset,lastWeeklyReset:this.lastWeeklyReset};localStorage.setItem("challenge_data",JSON.stringify(e))}load(){const e=localStorage.getItem("challenge_data");if(e)try{const t=JSON.parse(e);this.dailyChallenges=t.dailyChallenges||[],this.weeklyChallenges=t.weeklyChallenges||[],this.specialChallenges=t.specialChallenges||[],this.completedChallenges=new Set(t.completedChallenges||[]),this.towerProgress=t.towerProgress||this.towerProgress,this.challengePoints=t.challengePoints||0,this.challengeRank=t.challengeRank||1,this.lastDailyReset=t.lastDailyReset||Date.now(),this.lastWeeklyReset=t.lastWeeklyReset||Date.now()}catch(t){console.error("Failed to load challenge data:",t)}}}export{o as ChallengeModeSystem};
