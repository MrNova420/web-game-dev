import{l as p}from"./index-Bf-_4h4A.js";import"./three-DTQjiZ7L.js";import"./cannon-DPZWuR6y.js";class P{constructor(e){this.gameEngine=e,this.activeBattles=new Map,this.petStats=new Map,this.tournaments=[],this.breedingPairs=new Map,this.battleConfig={maxPetsPerTeam:3,turnTimeLimit:30,maxRounds:20,elementalAdvantages:{fire:{strong:["nature","ice"],weak:["water","earth"]},water:{strong:["fire","earth"],weak:["lightning","nature"]},earth:{strong:["lightning","wind"],weak:["nature","water"]},lightning:{strong:["water","wind"],weak:["earth","fire"]},nature:{strong:["water","earth"],weak:["fire","ice"]},ice:{strong:["nature","wind"],weak:["fire","lightning"]},wind:{strong:["ice","lightning"],weak:["earth"]},light:{strong:["dark"],weak:["dark"]},dark:{strong:["light"],weak:["light"]},neutral:{strong:[],weak:[]}},statusEffects:{burn:{damage:5,duration:3,type:"dot"},poison:{damage:3,duration:5,type:"dot"},freeze:{chance:.5,duration:1,type:"stun"},paralyze:{chance:.25,duration:2,type:"stun"},sleep:{duration:2,type:"disable"},confuse:{duration:2,type:"chaos"}}},this.abilityDatabase=this.createAbilityDatabase(),this.tournamentConfig={ranks:["bronze","silver","gold","platinum","diamond","master","legend"],prizePools:{bronze:{gold:100,tokens:10},silver:{gold:500,tokens:50},gold:{gold:2e3,tokens:200},platinum:{gold:1e4,tokens:1e3},diamond:{gold:5e4,tokens:5e3},master:{gold:2e5,tokens:2e4},legend:{gold:1e6,tokens:1e5,legendary_item:!0}}}}createAbilityDatabase(){return{scratch:{name:"Scratch",type:"physical",element:"neutral",power:20,accuracy:100,cooldown:0,description:"A basic scratching attack"},bite:{name:"Bite",type:"physical",element:"neutral",power:25,accuracy:95,cooldown:0,description:"Bites the enemy with sharp teeth"},ember:{name:"Ember",type:"magical",element:"fire",power:30,accuracy:100,cooldown:1,effects:[{type:"burn",chance:.3}],description:"Shoots small flames at the enemy"},water_gun:{name:"Water Gun",type:"magical",element:"water",power:30,accuracy:100,cooldown:1,description:"Sprays water at the enemy"},thunder_shock:{name:"Thunder Shock",type:"magical",element:"lightning",power:30,accuracy:100,cooldown:1,effects:[{type:"paralyze",chance:.3}],description:"Zaps the enemy with electricity"},vine_whip:{name:"Vine Whip",type:"physical",element:"nature",power:30,accuracy:100,cooldown:1,description:"Whips the enemy with vines"},flamethrower:{name:"Flamethrower",type:"magical",element:"fire",power:70,accuracy:100,cooldown:2,effects:[{type:"burn",chance:.5}],description:"Releases a stream of intense flames"},hydro_pump:{name:"Hydro Pump",type:"magical",element:"water",power:80,accuracy:90,cooldown:3,description:"Blasts the enemy with high-pressure water"},thunderbolt:{name:"Thunderbolt",type:"magical",element:"lightning",power:75,accuracy:100,cooldown:2,effects:[{type:"paralyze",chance:.4}],description:"Strikes with a powerful lightning bolt"},roar:{name:"Roar",type:"status",element:"neutral",power:0,accuracy:100,cooldown:3,effects:[{type:"fear",duration:2}],description:"Intimidates the enemy with a fierce roar"},heal:{name:"Heal",type:"status",element:"light",power:0,accuracy:100,cooldown:4,healing:50,description:"Restores HP"},protect:{name:"Protect",type:"status",element:"neutral",power:0,accuracy:100,cooldown:5,effects:[{type:"shield",duration:1}],description:"Blocks the next attack"},hyper_beam:{name:"Hyper Beam",type:"magical",element:"neutral",power:120,accuracy:90,cooldown:5,recoil:.5,description:"Devastating beam attack with recoil"},dragon_rage:{name:"Dragon Rage",type:"magical",element:"fire",power:100,accuracy:100,cooldown:4,description:"Unleashes draconic fury"},meteor_strike:{name:"Meteor Strike",type:"magical",element:"earth",power:110,accuracy:85,cooldown:4,aoe:!0,description:"Calls down meteors on all enemies"}}}initializePetForBattle(e){const t={petId:e.id,name:e.name,level:e.level||1,element:e.element||"neutral",currentHP:e.stats.hp,maxHP:e.stats.hp,attack:e.stats.attack||10,defense:e.stats.defense||10,speed:e.stats.speed||10,abilities:e.abilities||["scratch","bite"],activeEffects:[],cooldowns:new Map};return this.petStats.set(e.id,t),t}startBattle(e,t,a="pvp"){const n=`battle_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,i={id:n,type:a,player1:{pets:e.map(l=>this.initializePetForBattle(l)),activePet:0,wins:0},player2:{pets:t.map(l=>this.initializePetForBattle(l)),activePet:0,wins:0},turn:1,round:1,maxRounds:this.battleConfig.maxRounds,phase:"active",turnOrder:[],battleLog:[],startTime:Date.now()};return this.calculateTurnOrder(i),this.activeBattles.set(n,i),this.logBattle(i,`Battle started: ${a.toUpperCase()}`),n}calculateTurnOrder(e){const t=e.player1.pets[e.player1.activePet],a=e.player2.pets[e.player2.activePet];t.speed>a.speed?e.turnOrder=["player1","player2"]:a.speed>t.speed?e.turnOrder=["player2","player1"]:e.turnOrder=Math.random()<.5?["player1","player2"]:["player2","player1"]}executeAbility(e,t,a){const n=this.activeBattles.get(e);if(!n||n.phase!=="active")return null;const i=n[t],l=t==="player1"?n.player2:n.player1,s=i.pets[i.activePet],c=l.pets[l.activePet],o=this.abilityDatabase[a];if(!o)return null;if(s.cooldowns.has(a)&&s.cooldowns.get(a)>0)return this.logBattle(n,`${s.name}'s ${o.name} is on cooldown!`),null;if(Math.random()*100>o.accuracy)return this.logBattle(n,`${s.name}'s ${o.name} missed!`),{hit:!1};const d={hit:!0,damage:0,healing:0,critical:!1,effectApplied:null};if(o.power>0){let r=o.power;const u=s.attack/100,h=c.defense/100;r=Math.floor(r*u/h);const m=this.calculateTypeAdvantage(o.element,c.element);r=Math.floor(r*m),Math.random()<.1&&(r=Math.floor(r*2),d.critical=!0),c.currentHP=Math.max(0,c.currentHP-r),d.damage=r,this.logBattle(n,`${s.name} used ${o.name}! ${d.critical?"Critical hit! ":""}Dealt ${r} damage to ${c.name}!`),c.currentHP<=0&&this.handlePetFaint(n,l,c)}if(o.healing){const r=o.healing;s.currentHP=Math.min(s.maxHP,s.currentHP+r),d.healing=r,this.logBattle(n,`${s.name} healed ${r} HP!`)}if(o.effects)for(const r of o.effects)Math.random()<=(r.chance||1)&&(this.applyStatusEffect(n,c,r),d.effectApplied=r.type);if(o.cooldown>0&&s.cooldowns.set(a,o.cooldown),o.recoil){const r=Math.floor(d.damage*o.recoil);s.currentHP=Math.max(0,s.currentHP-r),this.logBattle(n,`${s.name} took ${r} recoil damage!`)}return d}calculateTypeAdvantage(e,t){const a=this.battleConfig.elementalAdvantages[e];return a?a.strong.includes(t)?2:a.weak.includes(t)?.5:1:1}applyStatusEffect(e,t,a){const n=this.battleConfig.statusEffects[a.type];n&&(t.activeEffects.push({type:a.type,duration:a.duration||n.duration,turnsRemaining:a.duration||n.duration,...n}),this.logBattle(e,`${t.name} is affected by ${a.type}!`))}processStatusEffects(e,t){for(let a=t.activeEffects.length-1;a>=0;a--){const n=t.activeEffects[a];if(n.type==="dot"&&n.damage&&(t.currentHP=Math.max(0,t.currentHP-n.damage),this.logBattle(e,`${t.name} takes ${n.damage} ${n.type} damage!`)),(n.type==="stun"||n.type==="disable")&&(Math.random()<=n.chance||n.type==="disable"))return this.logBattle(e,`${t.name} is ${n.type}!`),!0;n.turnsRemaining--,n.turnsRemaining<=0&&(t.activeEffects.splice(a,1),this.logBattle(e,`${t.name} recovered from ${n.type}!`))}return!1}handlePetFaint(e,t,a){this.logBattle(e,`${a.name} fainted!`),t.pets.filter(i=>i.currentHP>0).length===0?this.endBattle(e,t===e.player1?"player2":"player1"):(t.activePet=t.pets.findIndex(i=>i.currentHP>0),this.logBattle(e,`Switched to ${t.pets[t.activePet].name}!`),this.calculateTurnOrder(e))}switchPet(e,t,a){const n=this.activeBattles.get(e);if(!n)return!1;const i=n[t],l=i.pets[a];return!l||l.currentHP<=0?!1:(i.activePet=a,this.logBattle(n,`Switched to ${l.name}!`),this.calculateTurnOrder(n),!0)}endBattle(e,t){return e.phase="ended",e.winner=t,e.endTime=Date.now(),e.duration=e.endTime-e.startTime,this.logBattle(e,`Battle ended! Winner: ${t}`),this.awardBattleRewards(e,t),e}awardBattleRewards(e,t){if(e.type==="tournament"){const a=this.tournaments.find(n=>n.battleId===e.id);if(a){const n=this.tournamentConfig.prizePools[a.rank];p.info(`Tournament winner ${t} receives:`,n)}}for(const a of[e.player1,e.player2])for(const n of a.pets){const i=Math.floor(50*e.round);p.info(`${n.name} gained ${i} experience!`)}}updateCooldowns(e){for(const t of[e.player1,e.player2])for(const a of t.pets)for(const[n,i]of a.cooldowns)i>0?a.cooldowns.set(n,i-1):a.cooldowns.delete(n)}startTournament(e,t){const a={id:`tournament_${Date.now()}`,rank:e,participants:t,bracket:this.generateTournamentBracket(t),currentRound:1,prizes:this.tournamentConfig.prizePools[e],startTime:Date.now()};return this.tournaments.push(a),a}generateTournamentBracket(e){const t=[];for(let a=0;a<e.length;a+=2)a+1<e.length&&t.push({player1:e[a],player2:e[a+1],winner:null});return t}logBattle(e,t){e.battleLog.push({round:e.round,turn:e.turn,message:t,timestamp:Date.now()}),p.info(`[Battle ${e.id}] ${t}`)}getBattleStatus(e){const t=this.activeBattles.get(e);return t?{id:t.id,type:t.type,round:t.round,phase:t.phase,player1:{activePet:t.player1.pets[t.player1.activePet],petCount:t.player1.pets.filter(a=>a.currentHP>0).length},player2:{activePet:t.player2.pets[t.player2.activePet],petCount:t.player2.pets.filter(a=>a.currentHP>0).length},log:t.battleLog.slice(-10)}:null}}export{P as PetBattleSystem};
