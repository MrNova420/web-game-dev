import{l}from"./index-Bf-_4h4A.js";import"./three-DTQjiZ7L.js";import"./cannon-DPZWuR6y.js";class g{constructor(e,a,i,t){this.combatSystem=e,this.particleSystem=a,this.audioSystem=i,this.uiSystem=t,this.combos=new Map,this.comboDefinitions=this.initializeComboDefinitions(),this.activeChains=new Map}initializeComboDefinitions(){return{sword_basic:{name:"Sword Triple Slash",attacks:["light","light","light"],timingWindow:1e3,damageMultipliers:[1,1.2,1.5],finisher:{name:"Devastating Blow",damageMultiplier:2.5,effect:"knockback",animation:"heavy_attack"}},sword_advanced:{name:"Blade Dance",attacks:["light","heavy","light","heavy"],timingWindow:800,damageMultipliers:[1,1.3,1.5,1.8],finisher:{name:"Whirlwind Strike",damageMultiplier:3,effect:"aoe",radius:5,animation:"spin_attack"}},axe_heavy:{name:"Crushing Combo",attacks:["heavy","heavy","heavy"],timingWindow:1200,damageMultipliers:[1.5,1.8,2.2],finisher:{name:"Skull Splitter",damageMultiplier:4,effect:"stun",duration:2e3,animation:"overhead_smash"}},dual_wield_fast:{name:"Flurry of Blades",attacks:["light","light","light","light","light"],timingWindow:600,damageMultipliers:[.8,.9,1,1.2,1.5],finisher:{name:"Cross Slash",damageMultiplier:2.8,effect:"bleed",animation:"cross_strike"}},mage_elemental:{name:"Elemental Cascade",attacks:["fire","ice","lightning"],timingWindow:1500,damageMultipliers:[1,1.3,1.6],finisher:{name:"Elemental Explosion",damageMultiplier:3.5,effect:"aoe_elemental",radius:8,elements:["fire","ice","lightning"],animation:"elemental_burst"}},monk_basic:{name:"Tiger Fist Combo",attacks:["punch","punch","kick"],timingWindow:700,damageMultipliers:[1,1.2,1.6],finisher:{name:"Rising Dragon Kick",damageMultiplier:2.8,effect:"launch",animation:"uppercut"}},monk_advanced:{name:"Thousand Palm Strike",attacks:["punch","punch","punch","punch","kick","kick"],timingWindow:500,damageMultipliers:[.9,1,1.1,1.2,1.5,1.8],finisher:{name:"Divine Palm",damageMultiplier:4.5,effect:"stun_knockback",animation:"palm_strike"}},rogue_backstab:{name:"Shadow Strike Chain",attacks:["backstab","slash","slash"],timingWindow:900,damageMultipliers:[2,1.5,1.8],requiresBackAttack:!0,finisher:{name:"Eviscerate",damageMultiplier:5,effect:"bleed_heavy",animation:"finisher_strike"}},bow_rapid:{name:"Rapid Shot",attacks:["arrow","arrow","arrow","arrow"],timingWindow:800,damageMultipliers:[1,1.1,1.2,1.4],finisher:{name:"Piercing Shot",damageMultiplier:3,effect:"pierce",pierceCount:3,animation:"power_shot"}}}}startCombo(e,a){const i=this.comboDefinitions[a];return i?(this.combos.set(e,{type:a,definition:i,currentStep:0,startTime:Date.now(),lastAttackTime:Date.now(),totalDamage:0,hits:[]}),this.uiSystem&&this.uiSystem.showComboTracker(e,i.name,i.attacks.length),!0):(l.warn(`Combo type ${a} not found`),!1)}advanceCombo(e,a,i){const t=this.combos.get(e);if(!t)return{success:!1,reason:"No active combo"};const s=Date.now();if(s-t.lastAttackTime>t.definition.timingWindow)return this.breakCombo(e),{success:!1,reason:"Timing window expired"};const m=t.definition.attacks[t.currentStep];if(a!==m)return this.breakCombo(e),{success:!1,reason:"Wrong attack type"};t.definition.requiresBackAttack&&t.currentStep;const n=t.definition.damageMultipliers[t.currentStep],c=this.combatSystem.getBaseDamage(e)*n;return this.combatSystem.dealDamage(e,i,c),t.hits.push({step:t.currentStep,damage:c,time:s}),t.totalDamage+=c,t.currentStep++,t.lastAttackTime=s,this.uiSystem&&this.uiSystem.updateComboCounter(e,t.currentStep,t.definition.attacks.length),this.playComboEffect(e,i,t.currentStep),t.currentStep>=t.definition.attacks.length?this.executeFinisher(e,i):{success:!0,step:t.currentStep,totalSteps:t.definition.attacks.length,damage:c,multiplier:n}}executeFinisher(e,a){const i=this.combos.get(e);if(!i)return{success:!1};const t=i.definition.finisher,o=this.combatSystem.getBaseDamage(e)*t.damageMultiplier;this.combatSystem.dealDamage(e,a,o),this.applyFinisherEffect(e,a,t),this.playFinisherEffect(e,a,t);const m=this.calculateComboBonus(i);return this.uiSystem&&this.uiSystem.showComboComplete(e,{comboName:i.definition.name,totalDamage:i.totalDamage+o,hits:i.hits.length,finisherName:t.name,bonus:m}),this.combos.delete(e),{success:!0,comboComplete:!0,finisher:t.name,totalDamage:i.totalDamage+o,finisherDamage:o,bonus:m}}applyFinisherEffect(e,a,i){switch(i.effect){case"knockback":this.combatSystem.applyKnockback(a,e,10);break;case"aoe":const t=this.combatSystem.getPosition(a);this.combatSystem.getEnemiesInRadius(t,i.radius).forEach(n=>{n!==a&&this.combatSystem.dealDamage(e,n,this.combatSystem.getBaseDamage(e)*i.damageMultiplier*.5)});break;case"stun":this.combatSystem.applyStatusEffect(a,"stun",i.duration);break;case"bleed":this.combatSystem.applyStatusEffect(a,"bleed",5e3,this.combatSystem.getBaseDamage(e)*.1);break;case"bleed_heavy":this.combatSystem.applyStatusEffect(a,"bleed",8e3,this.combatSystem.getBaseDamage(e)*.2);break;case"launch":this.combatSystem.applyLaunch(a,5);break;case"stun_knockback":this.combatSystem.applyStatusEffect(a,"stun",1500),this.combatSystem.applyKnockback(a,e,8);break;case"pierce":break;case"aoe_elemental":const o=this.combatSystem.getPosition(a);this.combatSystem.getEnemiesInRadius(o,i.radius).forEach(n=>{i.elements.forEach(r=>{this.combatSystem.dealElementalDamage(e,n,this.combatSystem.getBaseDamage(e)*.8,r)})});break}}playComboEffect(e,a,i){if(!this.particleSystem||!this.audioSystem)return;const t=this.combatSystem.getPosition(a);this.particleSystem.createEffect(`combo_hit_${i}`,t,{type:"impact",color:this.getComboColor(i),count:20+i*10});const s=1+i*.1;this.audioSystem.playSFX("combo_hit",1,s)}playFinisherEffect(e,a,i){if(!this.particleSystem||!this.audioSystem)return;const t=this.combatSystem.getPosition(a);this.particleSystem.createEffect("finisher",t,{type:i.effect,scale:2,duration:2e3}),this.audioSystem.playSFX("combo_finisher",1.5),this.uiSystem&&this.uiSystem.cameraShake&&this.uiSystem.cameraShake(.8,.5)}getComboColor(e){const a=["#ffffff","#ffff00","#ff8800","#ff0000","#ff00ff"];return a[Math.min(e,a.length-1)]}calculateComboBonus(e){const a=e.hits.reduce((t,s,o)=>o===0?0:t+(s.time-e.hits[o-1].time),0)/(e.hits.length-1),i=Math.max(0,1.5-a/e.definition.timingWindow);return{experienceBonus:50+e.hits.length*10,damageBonus:i,stylePoints:e.hits.length*100}}breakCombo(e){this.combos.get(e)&&(this.uiSystem&&this.uiSystem.showComboBreak(e),this.combos.delete(e))}getActiveCombo(e){return this.combos.get(e)}isComboActive(e){return this.combos.has(e)}getAvailableCombos(e,a){const i=[];for(const[t,s]of Object.entries(this.comboDefinitions))t.startsWith(a)&&i.push({id:t,...s});return i}update(e){const a=Date.now();for(const[i,t]of this.combos.entries())a-t.lastAttackTime>t.definition.timingWindow&&this.breakCombo(i)}}export{g as default};
