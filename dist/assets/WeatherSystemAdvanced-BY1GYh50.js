class a{constructor(t,e,i,n){this.scene=t,this.particleSystem=e,this.soundManager=i,this.dayNightCycle=n,this.currentWeather="clear",this.targetWeather="clear",this.transitionProgress=1,this.transitionDuration=5,this.weatherTypes={clear:{fogDensity:0,windSpeed:.1,lightingMultiplier:1,ambientSound:null,particles:[]},rain:{fogDensity:.002,windSpeed:.3,lightingMultiplier:.7,ambientSound:"rain",particles:[{type:"rain",count:1e3}]},snow:{fogDensity:.003,windSpeed:.2,lightingMultiplier:.9,ambientSound:"wind",particles:[{type:"snow",count:500}]},storm:{fogDensity:.005,windSpeed:.6,lightingMultiplier:.4,ambientSound:"storm",particles:[{type:"rain",count:2e3},{type:"fog",count:100}],lightning:!0},fog:{fogDensity:.01,windSpeed:.1,lightingMultiplier:.6,ambientSound:"wind",particles:[{type:"fog",count:200}]},blizzard:{fogDensity:.008,windSpeed:.8,lightingMultiplier:.5,ambientSound:"blizzard",particles:[{type:"snow",count:1500},{type:"fog",count:150}]},sandstorm:{fogDensity:.01,windSpeed:.7,lightingMultiplier:.6,ambientSound:"wind",particles:[{type:"dust",count:800}]}},this.intensity=1,this.lightning={enabled:!1,nextStrike:0,strikeInterval:3,flashDuration:.2,currentFlash:0},this.wind={direction:{x:1,y:0,z:0},speed:.1,turbulence:.1},this.activeEmitters=[],this.weatherChangeCallbacks=[],this.initialize()}initialize(){logger.info("[WeatherSystemAdvanced] Initializing weather system..."),this.setWeather("clear",0),logger.info("[WeatherSystemAdvanced] Weather system initialized")}setWeather(t,e=5){if(!this.weatherTypes[t]){logger.warn(`[WeatherSystemAdvanced] Unknown weather type: ${t}`);return}this.currentWeather!==t&&(logger.info(`[WeatherSystemAdvanced] Changing weather from ${this.currentWeather} to ${t}`),this.targetWeather=t,this.transitionDuration=e,this.transitionProgress=0,this.weatherChangeCallbacks.forEach(i=>{i(t,this.currentWeather)}))}setIntensity(t){this.intensity=Math.max(0,Math.min(1,t)),this.updateWeatherEffects()}updateWeatherEffects(){const t=this.weatherTypes[this.currentWeather],e=this.weatherTypes[this.targetWeather];if(!t||!e)return;const i=this.transitionProgress,n=this.lerp(t.fogDensity,e.fogDensity,i)*this.intensity;this.updateFog(n),this.wind.speed=this.lerp(t.windSpeed,e.windSpeed,i)*this.intensity;const s=this.lerp(t.lightingMultiplier,e.lightingMultiplier,i);this.updateLighting(s),i>=.5?this.updateParticles(e.particles):this.updateParticles(t.particles),i>=1&&e.ambientSound&&this.updateAmbientSound(e.ambientSound),this.lightning.enabled=e.lightning||!1}updateFog(t){this.scene.fog&&(this.scene.fog.density=t)}updateLighting(t){this.dayNightCycle}updateParticles(t){this.clearParticleEmitters(),this.particleSystem&&t.forEach(e=>{const i=this.particleSystem.createEffect(`weather_${e.type}`,{x:0,y:20,z:0},{type:e.type,count:Math.floor(e.count*this.intensity),lifetime:5,velocity:{x:this.wind.direction.x,y:-5,z:this.wind.direction.z},spread:50,continuous:!0});this.activeEmitters.push(i)})}clearParticleEmitters(){this.particleSystem&&(this.activeEmitters.forEach(t=>{this.particleSystem.removeEffect(t)}),this.activeEmitters=[])}updateAmbientSound(t){this.soundManager&&this.soundManager.playAmbient(t,!0)}triggerLightning(){if(this.lightning.enabled){if(logger.info("[WeatherSystemAdvanced] Lightning strike!"),this.lightning.currentFlash=this.lightning.flashDuration,this.soundManager){const t=Math.random()*2;setTimeout(()=>{this.soundManager.playSFX("thunder",.8)},t*1e3)}if(this.particleSystem){const t=(Math.random()-.5)*100,e=(Math.random()-.5)*100;this.particleSystem.createEffect("lightning_bolt",{x:t,y:50,z:e},{type:"lightning",count:50,lifetime:.3,velocity:{x:0,y:-50,z:0},spread:2})}}}lerp(t,e,i){return t+(e-t)*i}update(t){if(this.transitionProgress<1&&(this.transitionProgress+=t/this.transitionDuration,this.transitionProgress>=1&&(this.transitionProgress=1,this.currentWeather=this.targetWeather,logger.info(`[WeatherSystemAdvanced] Weather transition complete: ${this.currentWeather}`)),this.updateWeatherEffects()),this.lightning.enabled&&(this.lightning.nextStrike-=t,this.lightning.nextStrike<=0&&(this.triggerLightning(),this.lightning.nextStrike=this.lightning.strikeInterval+Math.random()*5)),this.lightning.currentFlash>0){this.lightning.currentFlash-=t;const e=this.lightning.currentFlash/this.lightning.flashDuration;this.applyLightningFlash(e)}this.updateWind(t)}updateWind(t){const e=Date.now()*.001;this.wind.direction.x=Math.cos(e*.5)*this.wind.turbulence,this.wind.direction.z=Math.sin(e*.5)*this.wind.turbulence}applyLightningFlash(t){}getCurrentWeather(){return{type:this.currentWeather,intensity:this.intensity,transitionProgress:this.transitionProgress,wind:this.wind}}onWeatherChange(t){this.weatherChangeCallbacks.push(t)}setRandomWeather(){const t=Object.keys(this.weatherTypes),e=t[Math.floor(Math.random()*t.length)];this.setWeather(e)}startWeatherCycle(t=60){setInterval(()=>{this.setRandomWeather()},t*1e3),logger.info(`[WeatherSystemAdvanced] Weather cycle started (${t}s interval)`)}dispose(){this.clearParticleEmitters(),this.weatherChangeCallbacks=[],logger.info("[WeatherSystemAdvanced] Disposed")}}export{a as WeatherSystemAdvanced};
