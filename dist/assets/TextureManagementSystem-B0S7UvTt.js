import{s as M,b5 as f,M as u,R as y,m as w,l as C,ar as T}from"./three-DTQjiZ7L.js";class v{constructor(){this.textureLoader=new M,this.cubeTextureLoader=new f,this.textureCache=new Map,this.materialCache=new Map,this.settings={anisotropy:16,mipmaps:!0,compression:!0,maxTextureSize:2048},this.stats={texturesLoaded:0,materialsCreated:0,cacheHits:0,cacheMisses:0,memoryUsed:0},this.manifest={terrain:{grass:"/assets/textures/terrain/grass_",dirt:"/assets/textures/terrain/dirt_",stone:"/assets/textures/terrain/stone_",sand:"/assets/textures/terrain/sand_",snow:"/assets/textures/terrain/snow_",mud:"/assets/textures/terrain/mud_"},materials:{wood:"/assets/textures/materials/wood_",metal:"/assets/textures/materials/metal_",brick:"/assets/textures/materials/brick_",concrete:"/assets/textures/materials/concrete_",fabric:"/assets/textures/materials/fabric_"},nature:{bark:"/assets/textures/nature/bark_",leaves:"/assets/textures/nature/leaves_",moss:"/assets/textures/nature/moss_",rock:"/assets/textures/nature/rock_"},fantasy:{crystal:"/assets/textures/fantasy/crystal_",magic:"/assets/textures/fantasy/magic_",energy:"/assets/textures/fantasy/energy_",rune:"/assets/textures/fantasy/rune_"}}}async loadPBRMaterial(e,t){const a=`${e}_${t}`;if(this.materialCache.has(a))return this.stats.cacheHits++,this.materialCache.get(a).clone();this.stats.cacheMisses++;const s=this.manifest[e]?.[t];if(!s)return logger.warn(`Texture ${e}/${t} not found in manifest`),this.createFallbackMaterial();try{const[r,o,n,c,h]=await Promise.all([this.loadTexture(s+"albedo.jpg"),this.loadTexture(s+"normal.jpg"),this.loadTexture(s+"roughness.jpg"),this.loadTexture(s+"metallic.jpg"),this.loadTexture(s+"ao.jpg")]),l=new u({map:r,normalMap:o,roughnessMap:n,metalnessMap:c,aoMap:h,aoMapIntensity:1});return[r,o,n,c,h].forEach(i=>{i&&(i.wrapS=i.wrapT=y,i.anisotropy=this.settings.anisotropy,i.colorSpace=i===r?w:C)}),this.materialCache.set(a,l),this.stats.materialsCreated++,l}catch(r){return logger.warn(`Failed to load PBR material ${e}/${t}:`,r),this.createFallbackMaterial()}}async loadTexture(e){const t=e;if(this.textureCache.has(t))return this.textureCache.get(t);try{const a=await new Promise((s,r)=>{this.textureLoader.load(e,o=>s(o),void 0,o=>r(o))});return this.textureCache.set(t,a),this.stats.texturesLoaded++,this.updateMemoryStats(),a}catch(a){return logger.warn(`Failed to load texture ${e}:`,a),null}}async loadTerrainMaterial(e,t={x:10,y:10}){const a=await this.loadPBRMaterial("terrain",e);return a.map&&a.map.repeat.set(t.x,t.y),a.normalMap&&a.normalMap.repeat.set(t.x,t.y),a.roughnessMap&&a.roughnessMap.repeat.set(t.x,t.y),a.metalnessMap&&a.metalnessMap.repeat.set(t.x,t.y),a.aoMap&&a.aoMap.repeat.set(t.x,t.y),a}async loadColorTexture(e){return this.loadTexture(e)}createFallbackMaterial(e=8421504){return new u({color:e,roughness:.7,metalness:0})}createCustomMaterial(e){return new u(e)}async loadEnvironmentMap(e){const t=`/assets/textures/hdri/${e}/`,a=".jpg",s=[t+"px"+a,t+"nx"+a,t+"py"+a,t+"ny"+a,t+"pz"+a,t+"nz"+a];try{return await new Promise((o,n)=>{this.cubeTextureLoader.load(s,o,void 0,n)})}catch(r){return logger.warn(`Failed to load environment map ${e}:`,r),null}}applyMaterial(e,t){e.isMesh?(e.material=t,e.material.needsUpdate=!0):e.isGroup&&e.traverse(a=>{a.isMesh&&(a.material=t,a.material.needsUpdate=!0)})}createAtlas(e,t=2048){const a=document.createElement("canvas");a.width=t,a.height=t;const s=a.getContext("2d"),r=Math.ceil(Math.sqrt(e.length)),o=Math.ceil(e.length/r),n=t/r,c=t/o,h=[];e.forEach((i,m)=>{const d=m%r,p=Math.floor(m/r),x=d*n,g=p*c;i.image&&s.drawImage(i.image,x,g,n,c),h.push({u:d/r,v:p/o,width:1/r,height:1/o})});const l=new T(a);return l.needsUpdate=!0,{texture:l,uvMap:h}}optimizeTexture(e){if(!e||!e.image)return e;const t=e.image.width,a=e.image.height;if(t>this.settings.maxTextureSize||a>this.settings.maxTextureSize){const s=document.createElement("canvas"),r=this.settings.maxTextureSize/Math.max(t,a);s.width=t*r,s.height=a*r,s.getContext("2d").drawImage(e.image,0,0,s.width,s.height),e.image=s,e.needsUpdate=!0}return e}disposeTexture(e){e&&e.dispose()}disposeMaterial(e){e&&(e.map&&e.map.dispose(),e.normalMap&&e.normalMap.dispose(),e.roughnessMap&&e.roughnessMap.dispose(),e.metalnessMap&&e.metalnessMap.dispose(),e.aoMap&&e.aoMap.dispose(),e.dispose())}clearCache(){for(const e of this.textureCache.values())this.disposeTexture(e);for(const e of this.materialCache.values())this.disposeMaterial(e);this.textureCache.clear(),this.materialCache.clear(),this.stats.memoryUsed=0}updateMemoryStats(){let e=0;for(const t of this.textureCache.values())if(t&&t.image){const a=t.image.width||0,s=t.image.height||0;e+=a*s*4}this.stats.memoryUsed=e}getStats(){return{...this.stats,cacheSize:this.textureCache.size,materialCacheSize:this.materialCache.size,cacheHitRate:this.stats.cacheHits/(this.stats.cacheHits+this.stats.cacheMisses),memoryUsedMB:(this.stats.memoryUsed/(1024*1024)).toFixed(2)}}async preloadCommon(){const t=[{category:"terrain",name:"grass"},{category:"terrain",name:"dirt"},{category:"terrain",name:"stone"},{category:"materials",name:"wood"},{category:"materials",name:"metal"}].map(a=>this.loadPBRMaterial(a.category,a.name));return Promise.all(t)}}export{v as TextureManagementSystem};
