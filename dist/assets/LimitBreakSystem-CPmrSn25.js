class n{constructor(){this.limitGauges=new Map,this.maxLimit=100,this.limitBreaks={OMNISLASH:{name:"Omnislash",animation:"/assets/animations/omnislash.fbx",vfx:"/assets/particles/omnislash_effect.png",hits:15,damagePerHit:200},METEOR:{name:"Meteor",animation:"/assets/animations/meteor_cast.fbx",vfx:"/assets/particles/meteor_rain.png",aoe:!0,radius:20,damage:5e3},FINAL_HEAVEN:{name:"Final Heaven",animation:"/assets/animations/final_heaven.fbx",vfx:"/assets/particles/divine_impact.png",damage:9999,ignoreDefense:!0}}}gainLimitCharge(i,s){const e=this.limitGauges.get(i)||0,a=Math.min(e+s,this.maxLimit);this.limitGauges.set(i,a),a>=this.maxLimit&&logger.info(`${i} LIMIT BREAK READY!`)}executeLimitBreak(i,s){const e=this.limitGauges.get(i)||0;if(e<this.maxLimit)return logger.info(`${i} limit gauge not full (${e}/${this.maxLimit})`),null;const a=this.limitBreaks[s];return logger.info(`${i} executes ${a.name}!`),logger.info(`  Animation: ${a.animation}`),logger.info(`  VFX: ${a.vfx}`),this.limitGauges.set(i,0),a}}export{n as LimitBreakSystem};
