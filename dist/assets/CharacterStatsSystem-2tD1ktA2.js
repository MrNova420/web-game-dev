class g{constructor(){this.players=new Map,this.config={primaryStats:["strength","agility","intelligence","vitality","wisdom","luck"],baseStats:{strength:10,agility:10,intelligence:10,vitality:10,wisdom:10,luck:10},statCaps:{strength:999,agility:999,intelligence:999,vitality:999,wisdom:999,luck:999},secondaryStats:{maxHP:t=>100+t.vitality*10,maxMana:t=>100+t.intelligence*8+t.wisdom*5,maxStamina:t=>100+t.vitality*3+t.agility*2,attack:t=>t.strength*2+t.agility*.5,magicPower:t=>t.intelligence*2+t.wisdom*1.5,defense:t=>t.vitality*1.5+t.strength*.3,magicDefense:t=>t.wisdom*2+t.intelligence*.5,critChance:t=>.05+t.luck*.002+t.agility*.001,critDamage:t=>1.5+t.luck*.01,attackSpeed:t=>1+t.agility*.005,moveSpeed:t=>5+t.agility*.1,hpRegen:t=>t.vitality*.5+t.wisdom*.2,manaRegen:t=>t.wisdom*.8+t.intelligence*.3,staminaRegen:t=>10+t.vitality*.3,dodge:t=>.05+t.agility*.002,block:t=>.05+t.strength*.001+t.vitality*.001,accuracy:t=>.95+t.agility*5e-4,parry:t=>.05+t.strength*.001+t.agility*.001},synergies:[{stats:["strength","vitality"],threshold:100,bonus:{defense:20,maxHP:100},name:"Fortress"},{stats:["intelligence","wisdom"],threshold:100,bonus:{magicPower:30,maxMana:150},name:"Archmage"},{stats:["agility","luck"],threshold:100,bonus:{critChance:.1,dodge:.1},name:"Shadow Assassin"},{stats:["strength","agility","intelligence"],threshold:80,bonus:{attack:40,attackSpeed:.2},name:"Jack of All Trades"}]},this.modifiers=new Map}initializeStats(t,s={}){const e={id:t,base:{...this.config.baseStats},allocated:{strength:0,agility:0,intelligence:0,vitality:0,wisdom:0,luck:0},modifiers:{strength:0,agility:0,intelligence:0,vitality:0,wisdom:0,luck:0},secondary:{},current:{hp:0,mana:0,stamina:0},synergies:[],respecCount:0};return s.allocated&&(e.allocated={...e.allocated,...s.allocated}),this.calculateSecondaryStats(e),e.current.hp=e.secondary.maxHP,e.current.mana=e.secondary.maxMana,e.current.stamina=e.secondary.maxStamina,this.players.set(t,e),this.modifiers.set(t,[]),e}getTotalStat(t,s){const e=this.players.get(t);if(!e)return 0;const i=e.base[s]||0,a=e.allocated[s]||0,n=e.modifiers[s]||0,r=i+a+n,c=this.config.statCaps[s]||999;return Math.min(r,c)}allocateStats(t,s){const e=this.players.get(t);if(!e)return{success:!1,reason:"Player not found"};for(const[i,a]of Object.entries(s)){if(!this.config.primaryStats.includes(i))continue;e.allocated[i]=(e.allocated[i]||0)+a;const n=this.getTotalStat(t,i);n>this.config.statCaps[i]&&(e.allocated[i]-=n-this.config.statCaps[i])}return this.calculateSecondaryStats(e),this.checkSynergies(t),{success:!0,stats:this.getAllStats(t)}}calculateSecondaryStats(t){const s={};for(const e of this.config.primaryStats)s[e]=this.getTotalStat(t.id,e);for(const[e,i]of Object.entries(this.config.secondaryStats))t.secondary[e]=i(s);for(const e of t.synergies)for(const[i,a]of Object.entries(e.bonus))t.secondary[i]=(t.secondary[i]||0)+a;return t.secondary}checkSynergies(t){const s=this.players.get(t);if(s){s.synergies=[];for(const e of this.config.synergies){let i=!0;for(const a of e.stats)if(this.getTotalStat(t,a)<e.threshold){i=!1;break}i&&s.synergies.push(e)}this.calculateSecondaryStats(s)}}addModifier(t,s,e,i=null){const a=this.modifiers.get(t);if(!a)return;const n={id:s,modifications:e,expiresAt:i?Date.now()+i:null};a.push(n);const r=this.players.get(t);for(const[c,o]of Object.entries(e))this.config.primaryStats.includes(c)&&(r.modifiers[c]=(r.modifiers[c]||0)+o);return this.calculateSecondaryStats(r),this.checkSynergies(t),n}removeModifier(t,s){const e=this.modifiers.get(t);if(!e)return;const i=e.findIndex(r=>r.id===s);if(i===-1)return;const a=e[i];e.splice(i,1);const n=this.players.get(t);for(const[r,c]of Object.entries(a.modifications))this.config.primaryStats.includes(r)&&(n.modifiers[r]=(n.modifiers[r]||0)-c);this.calculateSecondaryStats(n),this.checkSynergies(t)}respecStats(t){const s=this.players.get(t);if(!s)return{success:!1};const e=Object.values(s.allocated).reduce((i,a)=>i+a,0);return s.allocated={strength:0,agility:0,intelligence:0,vitality:0,wisdom:0,luck:0},s.respecCount++,this.calculateSecondaryStats(s),this.checkSynergies(t),{success:!0,pointsReturned:e,respecCount:s.respecCount}}getAllStats(t){const s=this.players.get(t);if(!s)return null;const e={primary:{},secondary:{...s.secondary},current:{...s.current},synergies:s.synergies.map(i=>i.name)};for(const i of this.config.primaryStats)e.primary[i]={base:s.base[i],allocated:s.allocated[i],modifier:s.modifiers[i],total:this.getTotalStat(t,i),cap:this.config.statCaps[i]};return e}updateCurrent(t,s,e){const i=this.players.get(t);if(!i)return;const a=i.secondary[`max${s.charAt(0).toUpperCase()+s.slice(1)}`];return i.current[s]=Math.max(0,Math.min(e,a)),i.current[s]}regenerate(t,s){const e=this.players.get(t);if(!e)return;const i={hp:e.secondary.hpRegen,mana:e.secondary.manaRegen,stamina:e.secondary.staminaRegen};for(const[a,n]of Object.entries(i)){const r=e.current[a],c=e.secondary[`max${a.charAt(0).toUpperCase()+a.slice(1)}`];r<c&&(e.current[a]=Math.min(c,r+n*s))}}update(t){const s=Date.now();for(const[e,i]of this.modifiers.entries()){const a=i.filter(n=>n.expiresAt&&n.expiresAt<=s);for(const n of a)this.removeModifier(e,n.id)}}}export{g as CharacterStatsSystem};
