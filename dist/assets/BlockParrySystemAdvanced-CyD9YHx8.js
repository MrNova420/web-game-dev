class r{constructor(){this.blockingEntities=new Map,this.parryWindows=new Map,this.perfectParryWindow=200,this.blockStaminaCost=10,this.parryStaminaCost=15,this.animations={block_front:"/assets/animations/shield_block_front.fbx",block_left:"/assets/animations/shield_block_left.fbx",block_right:"/assets/animations/shield_block_right.fbx",parry_perfect:"/assets/animations/parry_perfect.fbx",guard_break:"/assets/animations/guard_break.fbx",shield_bash:"/assets/animations/shield_bash.fbx",counter_slash:"/assets/animations/counter_attack.fbx"},this.vfx={block_sparks:"/assets/particles/block_sparks.png",parry_flash:"/assets/particles/parry_flash.png",perfect_parry:"/assets/particles/perfect_parry_burst.png",guard_shatter:"/assets/particles/guard_break_effect.png",shield_impact:"/assets/particles/shield_bash_impact.png"},this.icons={blocking:"/assets/icons/combat/blocking.png",parry_ready:"/assets/icons/combat/parry_ready.png",guard_broken:"/assets/icons/combat/guard_broken.png"}}startBlocking(s,t="front"){const a=this.animations[`block_${t}`];console.log(`${s} starts blocking ${t}: ${a}`),this.blockingEntities.set(s,{direction:t,startTime:Date.now(),stamina:100,canParry:!0})}attemptParry(s){const t=Date.now();this.parryWindows.set(s,{startTime:t,endTime:t+this.perfectParryWindow}),console.log(`${s} attempts parry (${this.perfectParryWindow}ms window)`),console.log(`  Animation: ${this.animations.parry_perfect}`)}checkParry(s,t){const a=this.parryWindows.get(s);if(!a)return{success:!1};const e=Math.abs(t-a.startTime);return e<=this.perfectParryWindow?(console.log(`${s} PERFECT PARRY! (${e}ms)`),console.log(`  VFX: ${this.vfx.perfect_parry}`),this.parryWindows.delete(s),{success:!0,perfect:!0,counterWindowOpen:!0,damageReflected:.5}):{success:!1}}shieldBash(s,t){return console.log(`${s} shield bash -> ${t}`),console.log(`  Animation: ${this.animations.shield_bash}`),console.log(`  VFX: ${this.vfx.shield_impact}`),{damage:50,stunDuration:1.5}}guardBreak(s,t){const a=this.blockingEntities.get(t);return a&&a.stamina<=0?(console.log(`${t} guard broken!`),console.log(`  Animation: ${this.animations.guard_break}`),console.log(`  VFX: ${this.vfx.guard_shatter}`),this.blockingEntities.delete(t),!0):!1}stopBlocking(s){this.blockingEntities.delete(s),console.log(`${s} stops blocking`)}update(s){const t=Date.now();for(const[a,e]of this.parryWindows.entries())t>e.endTime&&this.parryWindows.delete(a);for(const[a,e]of this.blockingEntities.entries())e.stamina-=this.blockStaminaCost*s,e.stamina<=0&&this.guardBreak(null,a)}}export{r as BlockParrySystemAdvanced};
