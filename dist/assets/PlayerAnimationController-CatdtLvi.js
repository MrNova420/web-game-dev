import{aU as o,a6 as r,a$ as u}from"./three-DTQjiZ7L.js";import{l as a,F as c}from"./index-Bf-_4h4A.js";import"./cannon-DPZWuR6y.js";class p{constructor(i){this.modelLoader=i,this.mixer=null,this.animations=new Map,this.currentAction=null,this.currentState="idle",this.states={idle:null,walk:null,run:null,sprint:null,jump:null,fall:null,land:null,attack1:null,attack2:null,attack3:null,attack4:null,attack5:null,heavyAttack:null,dodgeRoll:null,block:null,parry:null,death:null,wave:null,dance:null,sit:null,sleep:null,gather:null,craft:null,build:null,fish:null,mine:null,eat:null,drink:null},this.isLoaded=!1}async init(i){if(!i){a.warn("PlayerAnimationController: No player model provided");return}this.mixer=new o(i);try{const t=new c,n=await this.modelLoader.loadModel("/assets/animations/AnimationLibrary_Unity_Standard.fbx");n&&n.animations&&(n.animations.forEach((e,s)=>{const l=this.getStateFromIndex(s);l&&this.states.hasOwnProperty(l)&&(this.states[l]=this.mixer.clipAction(e))}),a.info("PlayerAnimationController: Loaded",n.animations.length,"animations"),this.isLoaded=!0,this.playAnimation("idle"))}catch(t){a.error("Failed to load animation library:",t),this.createFallbackAnimations(i)}}getStateFromIndex(i){const t=Object.keys(this.states);return t[i%t.length]}createFallbackAnimations(i){a.info("Using fallback animations");const t=new r("idle",2,[]);this.states.idle=this.mixer.clipAction(t),this.isLoaded=!0}playAnimation(i,t=.2){if(!this.isLoaded)return;const n=this.states[i];if(!n){a.warn("Animation state not found:",i);return}this.currentAction&&this.currentAction!==n&&this.currentAction.fadeOut(t),n.reset().setEffectiveTimeScale(1).setEffectiveWeight(1).fadeIn(t).play(),this.currentAction=n,this.currentState=i}update(i,t={}){this.mixer&&(this.mixer.update(i),t&&this.updateStateFromPlayerInput(t))}updateStateFromPlayerInput(i){if(i.isAttacking){const t=(i.comboCount||0)%5+1;this.playAnimation(`attack${t}`)}else i.isDodging?this.playAnimation("dodgeRoll"):i.isBlocking?this.playAnimation("block"):i.isJumping?this.playAnimation("jump"):i.isFalling?this.playAnimation("fall"):i.isRunning?this.playAnimation("run"):i.isMoving?this.playAnimation("walk"):this.playAnimation("idle")}triggerAnimation(i,t=null){const n=this.states[i];n&&(n.reset().setLoop(u,1).play(),t&&this.mixer.addEventListener("finished",t))}getCurrentState(){return this.currentState}isPlaying(){return this.currentAction&&this.currentAction.isRunning()}}export{p as PlayerAnimationController};
