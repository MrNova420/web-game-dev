class h{constructor(){this.enemies=new Map,this.behaviorStates={IDLE:"idle",PATROL:"patrol",ALERT:"alert",CHASE:"chase",ATTACK:"attack",FLEE:"flee",DEAD:"dead"},this.enemyTypes=this.defineEnemyTypes(),this.bossTypes=this.defineBossTypes(),this.eliteModifiers=this.defineEliteModifiers()}defineEnemyTypes(){return{GOBLIN:{name:"Goblin",baseHP:100,baseAttack:15,baseDefense:5,moveSpeed:3.5,attackRange:2,detectionRange:15,personality:"cowardly",abilities:["quick_strike","backstab"],lootTable:["common_weapon","gold","potion"],xp:50},ORC:{name:"Orc",baseHP:250,baseAttack:30,baseDefense:15,moveSpeed:2.5,attackRange:3,detectionRange:20,personality:"aggressive",abilities:["power_slam","war_cry"],lootTable:["uncommon_weapon","armor_piece","gold"],xp:100},TROLL:{name:"Troll",baseHP:500,baseAttack:45,baseDefense:25,moveSpeed:2,attackRange:4,detectionRange:18,personality:"defensive",abilities:["regeneration","ground_smash"],lootTable:["rare_material","troll_hide","gold"],xp:200},SKELETON_ARCHER:{name:"Skeleton Archer",baseHP:80,baseAttack:25,baseDefense:3,moveSpeed:3,attackRange:20,detectionRange:25,personality:"tactical",abilities:["arrow_volley","piercing_shot"],lootTable:["arrows","bow","bones"],xp:60},DARK_MAGE:{name:"Dark Mage",baseHP:150,baseAttack:40,baseDefense:8,moveSpeed:2.8,attackRange:25,detectionRange:30,personality:"tactical",abilities:["shadow_bolt","curse","teleport"],lootTable:["spell_scroll","mana_crystal","staff"],xp:150},HARPY:{name:"Harpy",baseHP:120,baseAttack:20,baseDefense:10,moveSpeed:5,attackRange:5,detectionRange:30,personality:"aggressive",abilities:["dive_attack","screech"],canFly:!0,lootTable:["feather","talon","gold"],xp:80},DIRE_WOLF:{name:"Dire Wolf",baseHP:180,baseAttack:28,baseDefense:12,moveSpeed:4.5,attackRange:2.5,detectionRange:25,personality:"aggressive",abilities:["pack_howl","savage_bite"],packBehavior:!0,lootTable:["wolf_pelt","fang","meat"],xp:90},ZOMBIE:{name:"Zombie",baseHP:150,baseAttack:18,baseDefense:8,moveSpeed:1.5,attackRange:2,detectionRange:12,personality:"aggressive",abilities:["infectious_bite","undead_resilience"],lootTable:["rotten_flesh","virus_sample"],xp:70},WRAITH:{name:"Wraith",baseHP:200,baseAttack:35,baseDefense:5,moveSpeed:4,attackRange:3,detectionRange:20,personality:"aggressive",abilities:["phase_shift","life_drain","spectral_touch"],lootTable:["ectoplasm","soul_fragment"],xp:120},FIRE_ELEMENTAL:{name:"Fire Elemental",baseHP:220,baseAttack:38,baseDefense:15,moveSpeed:3,attackRange:15,detectionRange:20,personality:"aggressive",abilities:["fireball","flame_aura","combustion"],immunities:["fire"],weaknesses:["water","ice"],lootTable:["fire_essence","ember_core"],xp:140},ICE_ELEMENTAL:{name:"Ice Elemental",baseHP:220,baseAttack:32,baseDefense:20,moveSpeed:2.5,attackRange:15,detectionRange:20,personality:"defensive",abilities:["ice_shard","freeze_aura","blizzard"],immunities:["ice"],weaknesses:["fire"],lootTable:["ice_essence","frozen_core"],xp:140}}}defineBossTypes(){return{GOBLIN_KING:{name:"Goblin King",baseHP:5e3,baseAttack:80,baseDefense:40,moveSpeed:3,attackRange:5,detectionRange:50,personality:"elite",phases:[{hpThreshold:100,abilities:["royal_slash","summon_goblins"],behavior:"aggressive"},{hpThreshold:50,abilities:["royal_slash","summon_goblins","berserker_rage"],behavior:"berserker",speedMultiplier:1.5},{hpThreshold:25,abilities:["royal_slash","summon_elite_goblins","berserker_rage","crown_of_thorns"],behavior:"desperate",speedMultiplier:2,damageMultiplier:1.5}],lootTable:["legendary_weapon","goblin_crown","gold_pile"],xp:5e3},DRAGON:{name:"Ancient Dragon",baseHP:2e4,baseAttack:150,baseDefense:80,moveSpeed:4,attackRange:30,detectionRange:100,personality:"boss",canFly:!0,phases:[{hpThreshold:100,abilities:["fire_breath","tail_swipe","wing_buffet"],behavior:"tactical",flying:!1},{hpThreshold:66,abilities:["fire_breath","tail_swipe","wing_buffet","aerial_assault"],behavior:"aggressive",flying:!0},{hpThreshold:33,abilities:["fire_breath","tail_swipe","inferno_rain","dragon_roar"],behavior:"berserker",flying:!1,damageMultiplier:1.8},{hpThreshold:10,abilities:["apocalypse_breath","cataclysm","dragon_rage"],behavior:"desperate",flying:!0,damageMultiplier:2.5,speedMultiplier:1.5}],lootTable:["mythic_weapon","dragon_scale","dragon_heart","massive_gold"],xp:5e4},LICH_LORD:{name:"Lich Lord",baseHP:15e3,baseAttack:120,baseDefense:60,moveSpeed:2,attackRange:40,detectionRange:80,personality:"boss",phases:[{hpThreshold:100,abilities:["death_bolt","summon_skeletons","life_drain"],behavior:"tactical"},{hpThreshold:75,abilities:["death_bolt","summon_wraiths","life_drain","curse_of_weakness"],behavior:"aggressive"},{hpThreshold:50,abilities:["death_wave","summon_death_knight","life_drain","plague_storm"],behavior:"tactical",summonPhylactery:!0},{hpThreshold:25,abilities:["apocalypse","summon_army","death_realm","soul_harvest"],behavior:"desperate",damageMultiplier:2,invulnerablePhases:!0}],lootTable:["legendary_staff","phylactery_fragment","necromancy_tome","soul_gems"],xp:4e4}}}defineEliteModifiers(){return{ENRAGED:{name:"Enraged",hpMultiplier:1.5,damageMultiplier:1.8,speedMultiplier:1.3,color:"red",aura:"flame"},FORTIFIED:{name:"Fortified",hpMultiplier:2,defenseMultiplier:2,damageReduction:.3,color:"gray",aura:"stone"},SWIFT:{name:"Swift",hpMultiplier:1.2,speedMultiplier:2,dodgeChance:.3,color:"cyan",aura:"wind"},VAMPIRIC:{name:"Vampiric",hpMultiplier:1.3,lifesteal:.3,abilities:["life_drain"],color:"crimson",aura:"blood"},TOXIC:{name:"Toxic",hpMultiplier:1.3,abilities:["poison_cloud","toxic_attack"],color:"green",aura:"poison"},ARCANE:{name:"Arcane",hpMultiplier:1.4,damageMultiplier:1.5,abilities:["arcane_shield","teleport","magic_missile"],color:"purple",aura:"magic"}}}createEnemy(e,t,a=1,i=!1,s=null){const o=this.enemyTypes[e]||this.enemyTypes.GOBLIN,r={id:Math.random().toString(36).substr(2,9),type:e,level:a,position:{...t},maxHP:o.baseHP*(1+(a-1)*.15),hp:o.baseHP*(1+(a-1)*.15),attack:o.baseAttack*(1+(a-1)*.12),defense:o.baseDefense*(1+(a-1)*.1),moveSpeed:o.moveSpeed,state:this.behaviorStates.PATROL,personality:o.personality,target:null,lastSeenPosition:null,alertLevel:0,attackRange:o.attackRange,detectionRange:o.detectionRange,lastAttackTime:0,attackCooldown:1e3,abilities:[...o.abilities],lastAbilityUse:{},path:[],pathUpdateTime:0,stuckCounter:0,canFly:o.canFly||!1,packBehavior:o.packBehavior||!1,immunities:o.immunities||[],weaknesses:o.weaknesses||[],lootTable:o.lootTable,xp:o.xp*a,memory:{playerLastPosition:null,timeSinceLastSeen:0,damageReceived:[],alliesNearby:[],healthThreshold:.3}};if(i&&s){const n=this.eliteModifiers[s];n&&(r.isElite=!0,r.eliteType=s,r.maxHP*=n.hpMultiplier||1,r.hp=r.maxHP,r.attack*=n.damageMultiplier||1,r.defense*=n.defenseMultiplier||1,r.moveSpeed*=n.speedMultiplier||1,n.abilities&&r.abilities.push(...n.abilities),r.eliteModifier=n)}return this.enemies.set(r.id,r),r}createBoss(e,t,a=1){const i=this.bossTypes[e]||this.bossTypes.GOBLIN_KING,s={id:Math.random().toString(36).substr(2,9),type:e,level:a,position:{...t},isBoss:!0,maxHP:i.baseHP*(1+(a-1)*.2),hp:i.baseHP*(1+(a-1)*.2),attack:i.baseAttack*(1+(a-1)*.15),defense:i.baseDefense*(1+(a-1)*.12),moveSpeed:i.moveSpeed,currentPhase:0,phases:i.phases,phaseTransitioning:!1,state:this.behaviorStates.IDLE,personality:i.personality,target:null,attackRange:i.attackRange,detectionRange:i.detectionRange,lastAttackTime:0,attackCooldown:800,abilities:[...i.phases[0].abilities],lastAbilityUse:{},canFly:i.canFly||!1,isFlying:!1,lootTable:i.lootTable,xp:i.xp*a,memory:{playerLastPosition:null,timeSinceLastSeen:0,summonedMinions:[],phaseAbilitiesUsed:[]}};return this.enemies.set(s.id,s),s}update(e,t,a){for(const[i,s]of this.enemies)s.state!==this.behaviorStates.DEAD&&(s.isBoss&&this.updateBossPhase(s),this.updateBehaviorState(s,t,a,e),this.executeBehavior(s,t,e),this.updateMemory(s,t,e))}updateBehaviorState(e,t,a,i){const s=this.getDistance(e.position,t.position);switch(e.state){case this.behaviorStates.IDLE:s<e.detectionRange?(e.state=this.behaviorStates.ALERT,e.alertLevel=50):Math.random()<.01&&(e.state=this.behaviorStates.PATROL);break;case this.behaviorStates.PATROL:s<e.detectionRange&&(e.state=this.behaviorStates.ALERT,e.alertLevel=50);break;case this.behaviorStates.ALERT:e.alertLevel+=i*20,e.alertLevel>=100?(e.state=this.behaviorStates.CHASE,e.target=t):s>e.detectionRange*1.5&&(e.alertLevel=0,e.state=this.behaviorStates.PATROL);break;case this.behaviorStates.CHASE:s<=e.attackRange?e.state=this.behaviorStates.ATTACK:s>e.detectionRange*2&&(e.state=this.behaviorStates.PATROL,e.target=null),e.personality==="cowardly"&&e.hp<e.maxHP*.3&&(e.state=this.behaviorStates.FLEE);break;case this.behaviorStates.ATTACK:s>e.attackRange*1.5?e.state=this.behaviorStates.CHASE:e.personality==="defensive"&&e.hp<e.maxHP*.5&&Math.random()<.1&&(e.state=this.behaviorStates.FLEE);break;case this.behaviorStates.FLEE:(s>e.detectionRange*2||e.hp>e.maxHP*.6)&&(e.state=this.behaviorStates.PATROL);break}e.packBehavior&&e.state===this.behaviorStates.CHASE&&this.callNearbyAllies(e,a)}executeBehavior(e,t,a){switch(e.state){case this.behaviorStates.IDLE:break;case this.behaviorStates.PATROL:this.patrolBehavior(e,a);break;case this.behaviorStates.ALERT:this.lookAtTarget(e,t.position);break;case this.behaviorStates.CHASE:this.chaseBehavior(e,t,a);break;case this.behaviorStates.ATTACK:this.attackBehavior(e,t,a);break;case this.behaviorStates.FLEE:this.fleeBehavior(e,t,a);break}}patrolBehavior(e,t){(!e.patrolTarget||this.getDistance(e.position,e.patrolTarget)<1)&&(e.patrolTarget={x:e.position.x+(Math.random()-.5)*40,y:e.position.y,z:e.position.z+(Math.random()-.5)*40}),this.moveTowards(e,e.patrolTarget,t*.5)}chaseBehavior(e,t,a){switch(e.personality){case"aggressive":this.moveTowards(e,t.position,a);break;case"tactical":const i=this.calculateFlankPosition(e,t);this.moveTowards(e,i,a*.9);break;case"defensive":this.getDistance(e.position,t.position)<e.attackRange*.7?this.moveAwayFrom(e,t.position,a*.8):this.moveTowards(e,t.position,a*.7);break;default:this.moveTowards(e,t.position,a)}}attackBehavior(e,t,a){const i=Date.now();i-e.lastAttackTime>e.attackCooldown&&(this.lookAtTarget(e,t.position),e.abilities.length>0&&Math.random()<.3?this.useRandomAbility(e,t):this.performBasicAttack(e,t),e.lastAttackTime=i)}fleeBehavior(e,t,a){this.moveAwayFrom(e,t.position,a*1.2),e.packBehavior&&Math.random()<.05&&(e.state=this.behaviorStates.CHASE)}updateBossPhase(e){const t=e.hp/e.maxHP*100,a=e.currentPhase;if(a<e.phases.length-1){const i=e.phases[a+1];if(t<=i.hpThreshold&&!e.phaseTransitioning){e.phaseTransitioning=!0,e.currentPhase++,e.abilities=[...e.phases[e.currentPhase].abilities];const s=e.phases[e.currentPhase];s.speedMultiplier&&(e.moveSpeed*=s.speedMultiplier),s.damageMultiplier&&(e.attack*=s.damageMultiplier),s.flying!==void 0&&(e.isFlying=s.flying),this.triggerPhaseTransition(e),setTimeout(()=>{e.phaseTransitioning=!1},2e3)}}}triggerPhaseTransition(e){e.hp=Math.min(e.maxHP,e.hp+e.maxHP*.1),e.invulnerable=!0,setTimeout(()=>{e.invulnerable=!1},3e3)}moveTowards(e,t,a){const i=t.x-e.position.x,s=t.z-e.position.z,o=Math.sqrt(i*i+s*s);if(o>.1){const r=e.moveSpeed*a;e.position.x+=i/o*r,e.position.z+=s/o*r}}moveAwayFrom(e,t,a){const i=e.position.x-t.x,s=e.position.z-t.z,o=Math.sqrt(i*i+s*s);if(o>.1){const r=e.moveSpeed*a;e.position.x+=i/o*r,e.position.z+=s/o*r}}lookAtTarget(e,t){const a=t.x-e.position.x,i=t.z-e.position.z;e.rotation=Math.atan2(a,i)}calculateFlankPosition(e,t){const a=Math.random()*Math.PI*2,i=e.attackRange*.8;return{x:t.position.x+Math.cos(a)*i,y:t.position.y,z:t.position.z+Math.sin(a)*i}}callNearbyAllies(e,t){for(const a of t)a.id!==e.id&&a.type===e.type&&this.getDistance(e.position,a.position)<30&&a.state===this.behaviorStates.PATROL&&(a.state=this.behaviorStates.CHASE,a.target=e.target)}useRandomAbility(e,t){if(e.abilities.length===0)return;const a=e.abilities[Math.floor(Math.random()*e.abilities.length)];e.lastAbilityUse[a]=Date.now()}performBasicAttack(e,t){e.attack*(1-t.defense/(t.defense+100))}updateMemory(e,t,a){e.memory.timeSinceLastSeen+=a,this.getDistance(e.position,t.position)<e.detectionRange&&(e.memory.playerLastPosition={...t.position},e.memory.timeSinceLastSeen=0)}takeDamage(e,t,a){const i=this.enemies.get(e);!i||i.state===this.behaviorStates.DEAD||(i.hp-=t,i.memory.damageReceived.push({amount:t,source:a,time:Date.now()}),(i.state===this.behaviorStates.IDLE||i.state===this.behaviorStates.PATROL)&&(i.state=this.behaviorStates.ALERT,i.alertLevel=100),i.hp<=0&&(i.hp=0,i.state=this.behaviorStates.DEAD,this.onEnemyDeath(i)))}onEnemyDeath(e){const t=this.generateLoot(e),a=e.xp;return setTimeout(()=>{this.enemies.delete(e.id)},5e3),{loot:t,xp:a}}generateLoot(e){const t=[];for(const a of e.lootTable)Math.random()<.3&&t.push(a);return t}getDistance(e,t){const a=e.x-t.x,i=e.z-t.z;return Math.sqrt(a*a+i*i)}getEnemyById(e){return this.enemies.get(e)}getAllEnemies(){return Array.from(this.enemies.values())}getEnemiesInRange(e,t){return this.getAllEnemies().filter(a=>this.getDistance(a.position,e)<=t)}clearAllEnemies(){this.enemies.clear()}}export{h as EnemyAIBehaviorSystem};
