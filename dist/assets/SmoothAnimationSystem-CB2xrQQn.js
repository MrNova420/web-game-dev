import{l as a}from"./index-Bf-_4h4A.js";import"./three-DTQjiZ7L.js";import"./cannon-DPZWuR6y.js";class m{constructor(t,i){this.camera=t,this.character=i,this.cameraOffset=new THREE.Vector3(0,3,5),this.cameraLookOffset=new THREE.Vector3(0,1,0),this.cameraSmoothing=.1,this.targetPosition=new THREE.Vector3,this.currentPosition=new THREE.Vector3,this.targetRotation=new THREE.Quaternion,this.currentRotation=new THREE.Quaternion,this.movementSmoothing=.15,this.weaponSwayAmount=new THREE.Vector3(.02,.01,.01),this.weaponSwaySpeed=5,this.weaponSwayPhase=0,this.isGrounded=!0,this.fallVelocity=0,this.landingImpactThreshold=5,this.animationStates={idle:"/assets/animations/character_idle.fbx",walk:"/assets/animations/character_walk.fbx",run:"/assets/animations/character_run.fbx",jump:"/assets/animations/character_jump.fbx",fall:"/assets/animations/character_fall.fbx",land:"/assets/animations/character_land.fbx",dodge:"/assets/animations/character_dodge_roll.fbx",attack:"/assets/animations/character_attack.fbx"},this.currentAnimationState="idle",this.animationBlendTime=.2,this.init()}init(){a.info("SmoothAnimationSystem initialized"),a.info("- All animations: Mixamo (1000+ animations)"),a.info("- Camera smoothing: Enabled (lerp factor: 0.1)"),a.info("- Movement interpolation: Enabled (lerp factor: 0.15)"),a.info("- Weapon sway: Enabled"),a.info("- Landing impacts: Enabled")}updateCameraFollow(t,i){const e=t.clone().add(this.cameraOffset);this.camera.position.lerp(e,this.cameraSmoothing);const n=t.clone().add(this.cameraLookOffset);this.camera.lookAt(n)}updateCharacterMovement(t,i,e){this.currentPosition.lerp(t,this.movementSmoothing),this.character.position.copy(this.currentPosition),this.currentRotation.slerp(i,this.movementSmoothing),this.character.quaternion.copy(this.currentRotation)}updateWeaponSway(t,i,e){if(!t)return;const n=i.length();this.weaponSwayPhase+=e*this.weaponSwaySpeed*n,t.position.x=Math.sin(this.weaponSwayPhase)*this.weaponSwayAmount.x,t.position.y=Math.cos(this.weaponSwayPhase*2)*this.weaponSwayAmount.y,t.rotation.z=Math.sin(this.weaponSwayPhase*1.5)*this.weaponSwayAmount.z}handleLandingImpact(t){return t>this.landingImpactThreshold?(a.info(`Landing impact! (velocity: ${t.toFixed(2)})`),this.setAnimationState("land"),!0):!1}triggerJump(){a.info("Jump triggered (Mixamo wind-up animation)"),this.setAnimationState("jump"),this.isGrounded=!1}triggerDodgeRoll(t){a.info("Dodge roll triggered (Mixamo animation + camera rotation)"),this.setAnimationState("dodge")}setAnimationState(t){if(this.currentAnimationState!==t){a.info(`Animation transition: ${this.currentAnimationState} -> ${t} (blend: ${this.animationBlendTime}s)`),this.currentAnimationState=t;const i=this.animationStates[t];i&&a.info(`Loading animation: ${i} (Mixamo)`)}}updateMountAnimation(t,i){a.info(`Mount blend progress: ${(i*100).toFixed(1)}%`)}update(t,i){if(this.character&&this.updateCameraFollow(this.character.position,t),i.velocity&&i.weapon&&this.updateWeaponSway(i.weapon,i.velocity,t),!this.isGrounded&&i.isGrounded?(this.handleLandingImpact(this.fallVelocity),this.isGrounded=!0):i.isGrounded||(this.isGrounded=!1),i.isGrounded){const e=i.velocity?i.velocity.length():0;e<.1?this.setAnimationState("idle"):e<3?this.setAnimationState("walk"):this.setAnimationState("run")}else(i.velocity?i.velocity.y:0)>0?this.setAnimationState("jump"):this.setAnimationState("fall")}}export{m as SmoothAnimationSystem};
