import{V as s}from"./three-DTQjiZ7L.js";class h{constructor(t){this.gameEngine=t,this.dodgeConfig={cooldown:2,duration:.5,distance:5,invulnerabilityFrames:.3,staminaCost:20},this.parryConfig={cooldown:3,window:.3,staminaCost:15,counterMultiplier:2},this.blockConfig={damageReduction:.75,staminaDrainRate:10,minStamina:5},this.playerState={isDodging:!1,dodgeTimer:0,dodgeCooldownTimer:0,dodgeDirection:new s,isParrying:!1,parryTimer:0,parryCooldownTimer:0,parryActive:!1,isBlocking:!1,blockAngle:0,stamina:100,maxStamina:100,staminaRegenRate:10,staminaRegenDelay:2,staminaRegenTimer:0,comboCounter:0,lastAttackTime:0,comboWindow:1.5},this.combos=[{inputs:["light","light","light"],damage:1.5,name:"Triple Strike"},{inputs:["light","light","heavy"],damage:2,name:"Finisher"},{inputs:["heavy","light","heavy"],damage:2.5,name:"Power Combo"},{inputs:["light","heavy","light"],damage:1.8,name:"Mix Strike"}],this.currentComboInputs=[],this.criticalConfig={baseChance:.05,multiplier:2,skillBonus:0},this.lastParryTime=0,this.riposteWindow=2,this.setupControls()}setupControls(){typeof window<"u"&&(window.addEventListener("keydown",t=>this.onKeyDown(t)),window.addEventListener("keyup",t=>this.onKeyUp(t)))}onKeyDown(t){const e=this.playerState;switch(t.code){case"ShiftLeft":case"ShiftRight":this.attemptDodge();break;case"KeyQ":this.attemptParry();break;case"KeyE":e.isBlocking=!0;break}}onKeyUp(t){const e=this.playerState;switch(t.code){case"KeyE":e.isBlocking=!1;break}}update(t,e){this.updateDodge(t,e),this.updateParry(t,e),this.updateBlock(t,e),this.updateStamina(t),this.updateCombos(t)}attemptDodge(){const t=this.playerState,e=this.gameEngine.player;if(t.isDodging||t.dodgeCooldownTimer>0||t.stamina<this.dodgeConfig.staminaCost)return!1;const i=this.getPlayerMoveDirection();return i.length()===0&&i.set(0,0,1),t.isDodging=!0,t.dodgeTimer=0,t.dodgeDirection.copy(i.normalize()),t.stamina-=this.dodgeConfig.staminaCost,t.staminaRegenTimer=0,this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createDodgeEffect(e.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("dodge"),!0}updateDodge(t,e){const i=this.playerState,a=this.dodgeConfig;if(i.dodgeCooldownTimer>0&&(i.dodgeCooldownTimer-=t),!!i.isDodging){if(i.dodgeTimer+=t,i.dodgeTimer<a.duration){const n=a.distance/a.duration,o=i.dodgeDirection.clone().multiplyScalar(n*t);e.position.add(o),e.mesh&&e.mesh.position.copy(e.position)}i.dodgeTimer>=a.duration&&(i.isDodging=!1,i.dodgeCooldownTimer=a.cooldown)}}isInvulnerable(){const t=this.playerState;return t.isDodging&&t.dodgeTimer<this.dodgeConfig.invulnerabilityFrames}attemptParry(){const t=this.playerState;if(t.isParrying||t.parryCooldownTimer>0||t.stamina<this.parryConfig.staminaCost)return!1;t.isParrying=!0,t.parryTimer=0,t.parryActive=!0,t.stamina-=this.parryConfig.staminaCost,t.staminaRegenTimer=0;const e=this.gameEngine.player;return this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createParryEffect(e.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("parry"),!0}updateParry(t,e){const i=this.playerState,a=this.parryConfig;i.parryCooldownTimer>0&&(i.parryCooldownTimer-=t),i.isParrying&&(i.parryTimer+=t,i.parryTimer>=a.window&&(i.parryActive=!1),i.parryTimer>=a.window+.2&&(i.isParrying=!1,i.parryCooldownTimer=a.cooldown))}isParryActive(){return this.playerState.parryActive}onParrySuccess(t){const e=this.playerState,i=this.gameEngine.player;e.parryActive=!1,this.lastParryTime=Date.now(),t.ai&&(t.ai.stunned=!0,t.ai.stunnedTimer=1.5),this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createParrySuccessEffect(i.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("parry_success"),this.gameEngine.achievementSystem&&this.gameEngine.achievementSystem.onParry()}canRiposte(){return(Date.now()-this.lastParryTime)/1e3<this.riposteWindow}updateBlock(t,e){const i=this.playerState,a=this.blockConfig;i.isBlocking&&(i.stamina>0&&(i.stamina-=a.staminaDrainRate*t,i.staminaRegenTimer=0,i.stamina<0&&(i.stamina=0,i.isBlocking=!1)),e.mesh&&i.stamina>a.minStamina)}calculateBlockedDamage(t,e){const i=this.playerState,a=this.blockConfig;if(!i.isBlocking||i.stamina<a.minStamina)return t;const n=this.gameEngine.player,o=new s(0,0,-1).applyQuaternion(n.mesh.quaternion),r=e||o;if(o.dot(r)>.5){const m=t*(1-a.damageReduction);return this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createBlockEffect(n.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("block"),m}return t}updateStamina(t){const e=this.playerState;e.staminaRegenTimer+=t,e.staminaRegenTimer>=this.blockConfig.staminaDrainRate&&e.stamina<e.maxStamina&&!e.isBlocking&&(e.stamina+=e.staminaRegenRate*t,e.stamina>e.maxStamina&&(e.stamina=e.maxStamina))}recordAttack(t){const e=this.playerState,i=Date.now()/1e3;i-e.lastAttackTime>e.comboWindow&&(this.currentComboInputs=[],e.comboCounter=0),this.currentComboInputs.push(t),e.lastAttackTime=i,e.comboCounter++;const a=this.checkComboCompletion();a&&(this.executeCombo(a),this.currentComboInputs=[],e.comboCounter=0),this.currentComboInputs.length>5&&this.currentComboInputs.shift()}checkComboCompletion(){for(const t of this.combos)if(this.matchesCombo(t.inputs))return t;return null}matchesCombo(t){return this.currentComboInputs.length<t.length?!1:this.currentComboInputs.slice(-t.length).every((i,a)=>i===t[a])}executeCombo(t){const e=this.gameEngine.player;return this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createComboEffect(e.position,t.name),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("combo"),this.showComboNotification(t.name),t.damage}updateCombos(t){const e=this.playerState;Date.now()/1e3-e.lastAttackTime>e.comboWindow&&this.currentComboInputs.length>0&&(this.currentComboInputs=[],e.comboCounter=0)}calculateCritical(t){const e=this.criticalConfig,i=this.gameEngine.player;let a=e.baseChance;if(this.gameEngine.skillTreeSystem&&(this.gameEngine.skillTreeSystem.skills,a+=e.skillBonus),Math.random()<a){const n=t*e.multiplier;return this.gameEngine.particleSystem&&this.gameEngine.particleSystem.createCriticalEffect(i.position),this.gameEngine.audioSystem&&this.gameEngine.audioSystem.playSoundEffect("critical"),{isCritical:!0,damage:n}}return{isCritical:!1,damage:t}}getRiposteDamage(t){return this.canRiposte()?t*this.parryConfig.counterMultiplier:t}getPlayerMoveDirection(){return new s}showComboNotification(t){console.log(`Combo: ${t}!`)}getStaminaPercent(){return this.playerState.stamina/this.playerState.maxStamina}getCombatState(){return{...this.playerState,canDodge:!this.playerState.isDodging&&this.playerState.dodgeCooldownTimer<=0&&this.playerState.stamina>=this.dodgeConfig.staminaCost,canParry:!this.playerState.isParrying&&this.playerState.parryCooldownTimer<=0&&this.playerState.stamina>=this.parryConfig.staminaCost,canBlock:this.playerState.stamina>=this.blockConfig.minStamina,canRiposte:this.canRiposte()}}}export{h as CombatEnhancements};
