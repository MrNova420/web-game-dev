class l{constructor(){this.systems=new Map,this.systemDependencies=new Map,this.loadedSystems=new Set,this.systemStatus=new Map,this.integrationChecks=[],logger.info("[GameIntegrationSystem] Initializing comprehensive system integration...")}registerSystem(s,e,t=[]){return!s||!e?(logger.error(`[GameIntegrationSystem] Cannot register invalid system: ${s}`),!1):(this.systems.set(s,e),this.systemDependencies.set(s,t),this.systemStatus.set(s,"registered"),logger.info(`[GameIntegrationSystem] Registered: ${s}`),!0)}async initializeAllSystems(){logger.info("[GameIntegrationSystem] Initializing all game systems...");const s=this.calculateInitOrder(),e={successful:[],failed:[],total:s.length};for(const t of s)try{const i=this.systems.get(t),n=this.systemDependencies.get(t)||[];if(!n.every(a=>this.loadedSystems.has(a)))throw new Error(`Dependencies not met: ${n.join(", ")}`);i.initialize&&typeof i.initialize=="function"&&await i.initialize(),this.loadedSystems.add(t),this.systemStatus.set(t,"loaded"),e.successful.push(t),logger.info(`✓ [GameIntegrationSystem] Initialized: ${t}`)}catch(i){logger.error(`✗ [GameIntegrationSystem] Failed to initialize ${t}:`,i),this.systemStatus.set(t,"failed"),e.failed.push({system:t,error:i.message})}return logger.info(`[GameIntegrationSystem] Initialization complete: ${e.successful.length}/${e.total} systems loaded`),e.failed.length>0&&logger.warn("[GameIntegrationSystem] Failed systems:",e.failed),e}calculateInitOrder(){const s=[],e=new Set,t=new Set,i=n=>{if(e.has(n))return;if(t.has(n)){logger.warn(`[GameIntegrationSystem] Circular dependency detected: ${n}`);return}t.add(n),(this.systemDependencies.get(n)||[]).forEach(a=>{this.systems.has(a)&&i(a)}),t.delete(n),e.add(n),s.push(n)};for(const n of this.systems.keys())i(n);return s}async runIntegrationChecks(){logger.info("[GameIntegrationSystem] Running integration checks...");const s=[this.checkCombatIntegration.bind(this),this.checkUIIntegration.bind(this),this.checkAssetLoading.bind(this),this.checkSystemCommunication.bind(this),this.checkPerformance.bind(this)],e=[];for(const i of s)try{const n=await i();e.push(n)}catch(n){logger.error("[GameIntegrationSystem] Integration check failed:",n),e.push({passed:!1,error:n.message})}const t=e.every(i=>i.passed);return logger.info(`[GameIntegrationSystem] Integration checks: ${t?"PASSED":"ISSUES FOUND"}`),{allPassed:t,results:e}}async checkCombatIntegration(){const s=["CombatSystemOverhauled","WeaponSystem3D","SkillSystemAdvanced","StatusEffectSystemVisual","DamageCalculationAdvanced","ComboSystemEnhanced"],e=s.filter(i=>this.loadedSystems.has(i));return{name:"Combat Integration",passed:e.length===s.length,details:`${e.length}/${s.length} combat systems loaded`}}async checkUIIntegration(){const e=["UIPolishSystem","PlayerScreenEffectsSystem","InventorySystemEnhanced"].filter(i=>this.loadedSystems.has(i));return{name:"UI Integration",passed:e.length>=1,details:`${e.length} UI systems active`}}async checkAssetLoading(){const e=["AssetIntegrationSystem","ModelIntegrationSystem","AnimationIntegrationSystem","ParticleIntegrationSystem"].filter(i=>this.loadedSystems.has(i));return{name:"Asset Loading",passed:e.length>=1,details:`${e.length} asset systems active`}}async checkSystemCommunication(){return{name:"System Communication",passed:!0,details:"Event bus operational"}}async checkPerformance(){return{name:"Performance",passed:!0,details:"Target: 60 FPS"}}getStatusReport(){const s={totalRegistered:this.systems.size,loaded:this.loadedSystems.size,failed:0,systems:{}};for(const[e,t]of this.systemStatus.entries())s.systems[e]=t,t==="failed"&&s.failed++;return s}async repairFailedSystems(){logger.info("[GameIntegrationSystem] Attempting to repair failed systems...");const s=[];for(const[t,i]of this.systemStatus.entries())i==="failed"&&s.push(t);if(s.length===0)return logger.info("[GameIntegrationSystem] No failed systems to repair"),{repaired:0,stillFailed:0};const e={repaired:0,stillFailed:0};for(const t of s)try{const i=this.systems.get(t);i.initialize&&typeof i.initialize=="function"&&await i.initialize(),this.loadedSystems.add(t),this.systemStatus.set(t,"loaded"),e.repaired++,logger.info(`✓ [GameIntegrationSystem] Repaired: ${t}`)}catch(i){logger.error(`✗ [GameIntegrationSystem] Could not repair ${t}:`,i),e.stillFailed++}return logger.info(`[GameIntegrationSystem] Repair complete: ${e.repaired} fixed, ${e.stillFailed} still failing`),e}update(s){for(const[e,t]of this.systems.entries())if(this.loadedSystems.has(e)&&t.update&&typeof t.update=="function")try{t.update(s)}catch(i){logger.error(`[GameIntegrationSystem] Error updating ${e}:`,i)}}}export{l as GameIntegrationSystem};
