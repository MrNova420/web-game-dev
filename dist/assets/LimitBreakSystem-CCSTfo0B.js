class n{constructor(){this.limitGauges=new Map,this.maxLimit=100,this.limitBreaks={OMNISLASH:{name:"Omnislash",animation:"/assets/animations/omnislash.fbx",vfx:"/assets/particles/omnislash_effect.png",hits:15,damagePerHit:200},METEOR:{name:"Meteor",animation:"/assets/animations/meteor_cast.fbx",vfx:"/assets/particles/meteor_rain.png",aoe:!0,radius:20,damage:5e3},FINAL_HEAVEN:{name:"Final Heaven",animation:"/assets/animations/final_heaven.fbx",vfx:"/assets/particles/divine_impact.png",damage:9999,ignoreDefense:!0}}}gainLimitCharge(i,e){const a=this.limitGauges.get(i)||0,s=Math.min(a+e,this.maxLimit);this.limitGauges.set(i,s),s>=this.maxLimit&&console.log(`${i} LIMIT BREAK READY!`)}executeLimitBreak(i,e){const a=this.limitGauges.get(i)||0;if(a<this.maxLimit)return console.log(`${i} limit gauge not full (${a}/${this.maxLimit})`),null;const s=this.limitBreaks[e];return console.log(`${i} executes ${s.name}!`),console.log(`  Animation: ${s.animation}`),console.log(`  VFX: ${s.vfx}`),this.limitGauges.set(i,0),s}}export{n as LimitBreakSystem};
