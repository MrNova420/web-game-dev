import{V as r}from"./three-DTQjiZ7L.js";class h{constructor(e,t){this.scene=e,this.physicsWorld=t,this.isRacing=!1,this.currentTrack=null,this.racers=[],this.playerRacer=null,this.tracks=this.initializeTracks(),this.mounts=this.initializeMounts(),this.powerUps={SPEED_BOOST:{duration:3e3,speedMultiplier:2},SHIELD:{duration:5e3,protection:!0},LIGHTNING:{effect:"stun_others",duration:2e3},MUSHROOM:{speedMultiplier:1.5,duration:5e3},STAR:{invincible:!0,speedMultiplier:1.8,duration:8e3}},this.physics={maxSpeed:100,acceleration:20,deceleration:10,turnSpeed:3,driftFactor:1.5},this.stats={racesCompleted:0,racesWon:0,totalDistance:0,bestLapTime:1/0,powerUpsCollected:0,driftsExecuted:0}}initializeTracks(){return{crystal_circuit:{name:"Crystal Caverns Circuit",biome:"crystal_caverns",laps:3,length:5e3,difficulty:1,obstacles:["crystals","narrow_passages"],unlocked:!0},fungal_speedway:{name:"Fungal City Speedway",biome:"fungal_city",laps:3,length:6e3,difficulty:2,obstacles:["mushrooms","spores"],unlocked:!1,unlockRequirement:{races:5}},vine_cathedral_dash:{name:"Vine Cathedral Dash",biome:"vine_cathedral",laps:3,length:7e3,difficulty:3,obstacles:["vines","ruins"],unlocked:!1,unlockRequirement:{races:15}},starship_sprint:{name:"Broken Starship Sprint",biome:"broken_starship",laps:3,length:8e3,difficulty:4,obstacles:["debris","holograms"],unlocked:!1,unlockRequirement:{races:30}},twilight_grand_prix:{name:"Twilight Throne Grand Prix",biome:"twilight_throne",laps:5,length:1e4,difficulty:5,obstacles:["reality_distortions","floating_ruins"],unlocked:!1,unlockRequirement:{wins:20}}}}initializeMounts(){return{spirit_horse:{name:"Spirit Horse",speed:80,acceleration:15,handling:8,rarity:"common",unlocked:!0},smoke_wolf:{name:"Smoke Wolf",speed:90,acceleration:18,handling:9,rarity:"uncommon",unlocked:!1,unlockRequirement:{races:10}},thunder_drake:{name:"Thunder Drake",speed:110,acceleration:20,handling:7,rarity:"rare",unlocked:!1,unlockRequirement:{wins:5}},ethereal_phoenix:{name:"Ethereal Phoenix",speed:130,acceleration:25,handling:10,rarity:"epic",unlocked:!1,unlockRequirement:{wins:15}},omega_dragon:{name:"Omega Dragon",speed:150,acceleration:30,handling:10,rarity:"legendary",unlocked:!1,unlockRequirement:{wins:50}}}}startRace(e,t,i=7){const s=this.tracks[e],a=this.mounts[t];if(!s||!s.unlocked)return logger.warn(`Track ${e} not available`),!1;if(!a||!a.unlocked)return logger.warn(`Mount ${t} not available`),!1;this.isRacing=!0,this.currentTrack=s,this.playerRacer=this.createRacer(!0,a),this.racers.push(this.playerRacer);for(let n=0;n<i;n++){const o=this.getRandomMount(),c=this.createRacer(!1,o);this.racers.push(c)}return this.raceData={startTime:Date.now(),currentLap:1,lapTimes:[],position:1,powerUpsUsed:0},!0}createRacer(e,t){return{id:Math.random().toString(36),isPlayer:e,mount:t,position:new r(0,0,0),velocity:new r(0,0,0),rotation:0,speed:0,lap:1,checkpoint:0,isDrifting:!1,activePowerUps:[],isStunned:!1,hasShield:!1,rank:0}}getRandomMount(){const e=Object.values(this.mounts).filter(t=>t.unlocked);return e[Math.floor(Math.random()*e.length)]}update(e){if(this.isRacing){for(const t of this.racers)this.updateRacer(t,e);this.updateRankings(),this.playerRacer.lap>this.currentTrack.laps&&this.completeRace()}}updateRacer(e,t){if(e.isStunned){e.speed*=.95;return}let i=1;for(const a of e.activePowerUps)a.speedMultiplier&&(i*=a.speedMultiplier),a.remaining-=t*1e3,a.remaining<=0&&(e.activePowerUps=e.activePowerUps.filter(n=>n!==a));const s=e.mount.speed*i;e.isPlayer||this.updateAIRacer(e,t,s),e.speed=Math.min(e.speed,s),e.velocity.set(Math.sin(e.rotation)*e.speed,0,Math.cos(e.rotation)*e.speed),e.position.add(e.velocity.clone().multiplyScalar(t)),this.checkCheckpoints(e)}updateAIRacer(e,t,i){e.speed+=e.mount.acceleration*t,e.speed=Math.min(e.speed,i),e.activePowerUps.length>0&&Math.random()<.01&&this.usePowerUp(e,e.activePowerUps[0].type)}accelerate(){if(!this.playerRacer)return;const e=this.playerRacer.mount.acceleration;this.playerRacer.speed+=e*.016}brake(){this.playerRacer&&(this.playerRacer.speed*=.95)}turn(e){if(!this.playerRacer)return;const t=this.playerRacer.mount.handling*.05;this.playerRacer.rotation+=e*t}startDrift(){this.playerRacer&&(this.playerRacer.isDrifting=!0,this.stats.driftsExecuted++)}endDrift(){this.playerRacer&&(this.playerRacer.isDrifting=!1,this.playerRacer.speed*=1.2)}usePowerUp(e,t){const i=this.powerUps[t];if(i){if(t==="LIGHTNING")for(const s of this.racers)s!==e&&!s.hasShield&&(s.isStunned=!0,setTimeout(()=>{s.isStunned=!1},i.duration));else e.activePowerUps.push({type:t,...i,remaining:i.duration});e.isPlayer&&this.raceData.powerUpsUsed++}}checkCheckpoints(e){const t=e.position.length(),i=this.currentTrack.length,s=Math.floor(t%i/(i/10));if(s!==e.checkpoint&&(e.checkpoint=s,e.checkpoint===0&&t>i*e.lap&&(e.lap++,e.isPlayer))){const a=Date.now()-this.raceData.startTime;this.raceData.lapTimes.push(a),this.stats.bestLapTime=Math.min(this.stats.bestLapTime,a)}}updateRankings(){this.racers.sort((e,t)=>e.lap!==t.lap?t.lap-e.lap:t.checkpoint-e.checkpoint);for(let e=0;e<this.racers.length;e++)this.racers[e].rank=e+1;this.playerRacer&&(this.raceData.position=this.playerRacer.rank)}completeRace(){this.isRacing=!1;const e=Date.now()-this.raceData.startTime,t=this.playerRacer.rank,i={track:this.currentTrack.name,position:t,totalTime:e,lapTimes:this.raceData.lapTimes,bestLap:Math.min(...this.raceData.lapTimes),powerUpsUsed:this.raceData.powerUpsUsed,won:t===1};this.stats.racesCompleted++,i.won&&this.stats.racesWon++,this.stats.totalDistance+=this.currentTrack.length*this.currentTrack.laps;const s=500,a=(8-t)*100,n=i.bestLap<6e4?300:0;return i.reward=s+a+n,this.checkUnlocks(),window.gameEngine&&window.gameEngine.eventBus?.emit("racing:complete",i),this.racers=[],this.playerRacer=null,i}checkUnlocks(){for(const[e,t]of Object.entries(this.tracks))if(!t.unlocked&&t.unlockRequirement){const i=t.unlockRequirement;(i.races&&this.stats.racesCompleted>=i.races||i.wins&&this.stats.racesWon>=i.wins)&&(t.unlocked=!0,window.gameEngine&&window.gameEngine.eventBus?.emit("racing:unlockTrack",{track:t.name}))}for(const[e,t]of Object.entries(this.mounts))if(!t.unlocked&&t.unlockRequirement){const i=t.unlockRequirement;(i.races&&this.stats.racesCompleted>=i.races||i.wins&&this.stats.racesWon>=i.wins)&&(t.unlocked=!0,window.gameEngine&&window.gameEngine.eventBus?.emit("racing:unlockMount",{mount:t.name}))}}getAvailableTracks(){return Object.entries(this.tracks).filter(([e,t])=>t.unlocked).map(([e,t])=>({id:e,...t}))}getAvailableMounts(){return Object.entries(this.mounts).filter(([e,t])=>t.unlocked).map(([e,t])=>({id:e,...t}))}getStats(){return{...this.stats,winRate:this.stats.racesCompleted>0?(this.stats.racesWon/this.stats.racesCompleted*100).toFixed(1):0}}}export{h as RacingGameSystem};
