import{V as n,c as l,b as d,a as g}from"./three-DTQjiZ7L.js";class b{constructor(t,e){this.scene=t,this.physicsWorld=e,this.activeCombatants=new Map,this.activeHitboxes=[],this.damageEvents=[],this.combatLog=[],this.timings={comboWindow:800,parryWindow:200,dodgeIFrames:400,counterWindow:300,skillCancelWindow:150,criticalMultiplier:2,backstabMultiplier:2.5},this.rules={maxComboHits:20,comboDecayRate:.95,momentumGain:15,momentumDecay:2,parryStaminaCost:20,dodgeStaminaCost:30,blockDamageReduction:.5},this.hitboxTemplates={sword:{width:.3,length:1.5,height:.1,offset:new n(0,1,.8),duration:300},axe:{width:.4,length:1.2,height:.3,offset:new n(0,1.2,.7),duration:400},spear:{width:.2,length:2.5,height:.2,offset:new n(0,1,1.2),duration:250},hammer:{width:.6,length:1,height:.6,offset:new n(0,1.5,.6),duration:600},dagger:{width:.2,length:.8,height:.1,offset:new n(0,1,.5),duration:200},staff:{width:.3,length:1.8,height:.3,offset:new n(0,1.2,.9),duration:350}},this.combos={basic:[{type:"light",damage:1,momentum:10},{type:"light",damage:1,momentum:10},{type:"light",damage:1.1,momentum:15},{type:"heavy",damage:1.5,momentum:20,finisher:!0}],aerial:[{type:"light",damage:1.2,momentum:15,airborne:!0},{type:"heavy",damage:1.8,momentum:25,finisher:!0,groundSlam:!0}],charged:[{type:"heavy",damage:2.5,momentum:40,chargeTime:1500,finisher:!0}],rush:[{type:"light",damage:.8,momentum:8},{type:"light",damage:.8,momentum:8},{type:"light",damage:.8,momentum:8},{type:"light",damage:.9,momentum:10},{type:"heavy",damage:2,momentum:30,finisher:!0}]},this.statusEffects={stun:{duration:2e3,preventActions:!0},knockback:{duration:500,force:10},freeze:{duration:3e3,slowAmount:.8},burn:{duration:5e3,dps:10},poison:{duration:1e4,dps:5},bleed:{duration:8e3,dps:15},slow:{duration:4e3,slowAmount:.5},vulnerable:{duration:6e3,damageMultiplier:1.5},invulnerable:{duration:3e3,damageMultiplier:0}},this.stats={totalHits:0,totalDamage:0,criticalHits:0,backstabs:0,parries:0,dodges:0,combosCompleted:0,maxCombo:0}}registerCombatant(t,e){this.activeCombatants.set(t,{entity:e,hp:e.stats.hp||100,maxHp:e.stats.maxHp||100,stamina:100,maxStamina:100,momentum:0,combo:0,comboType:null,lastHitTime:0,isBlocking:!1,isParrying:!1,isDodging:!1,isInvulnerable:!1,statusEffects:new Map,hitboxes:[]})}executeAttack(t,e,i,s){const a=this.activeCombatants.get(t);if(!a||a.isStunned||!this.canAttack(a))return null;const o=this.createHitbox(a.entity,i,e,s);this.activeHitboxes.push({id:Math.random().toString(36),attackerId:t,hitbox:o,weaponType:i,attackType:e,damage:this.calculateBaseDamage(a,i,e),createdAt:Date.now(),duration:this.hitboxTemplates[i]?.duration||300,hasHit:new Set}),this.updateCombo(a,e);const r=e==="heavy"?25:10;return a.stamina=Math.max(0,a.stamina-r),o}createHitbox(t,e,i,s){const a=this.hitboxTemplates[e];if(!a)return logger.warn(`Unknown weapon type: ${e}`),null;const o=new l(a.width,a.height,a.length),r=t.position.clone(),m=a.offset.clone(),c=t.rotation.y||0;m.applyAxisAngle(new n(0,1,0),c),r.add(m);const u=new d({color:16711680,transparent:!0,opacity:.3,visible:!1}),h=new g(o,u);return h.position.copy(r),h.rotation.y=c,this.scene.add(h),h}calculateBaseDamage(t,e,i){const a=t.entity.stats?.attack||10,o={sword:1,axe:1.2,spear:.9,hammer:1.5,dagger:.7,staff:.8}[e]||1,r=i==="heavy"?1.8:1,m=1+t.combo*.05,c=1+t.momentum/200;return a*o*r*m*c}executeDodge(t,e){const i=this.activeCombatants.get(t);if(!i||i.stamina<this.rules.dodgeStaminaCost)return!1;i.isDodging=!0,i.isInvulnerable=!0,i.stamina-=this.rules.dodgeStaminaCost;const a=e.clone().normalize().multiplyScalar(3);return i.entity.position.add(a),setTimeout(()=>{i.isInvulnerable=!1,i.isDodging=!1},this.timings.dodgeIFrames),this.stats.dodges++,!0}executeParry(t){const e=this.activeCombatants.get(t);return!e||e.stamina<this.rules.parryStaminaCost?!1:(e.isParrying=!0,e.stamina-=this.rules.parryStaminaCost,setTimeout(()=>{e.isParrying=!1},this.timings.parryWindow),!0)}executeBlock(t,e){const i=this.activeCombatants.get(t);return i?(i.isBlocking=e,!0):!1}update(t){const e=Date.now();for(const[i,s]of this.activeCombatants)this.updateCombatant(s,t,e);this.updateHitboxes(e),this.processDamageEvents(),this.cleanupHitboxes(e)}updateCombatant(t,e,i){!t.isBlocking&&!t.isDodging&&(t.stamina=Math.min(t.maxStamina,t.stamina+e*20)),t.momentum=Math.max(0,t.momentum-this.rules.momentumDecay*e),i-t.lastHitTime>this.timings.comboWindow&&(t.combo=0,t.comboType=null);for(const[s,a]of t.statusEffects){if(a.remaining-=e*1e3,a.dps){const o=a.dps*e;this.applyDamage(t,o,"dot",s)}a.remaining<=0&&t.statusEffects.delete(s)}}updateHitboxes(t){for(const e of this.activeHitboxes)for(const[i,s]of this.activeCombatants)i===e.attackerId||e.hasHit.has(i)||s.isInvulnerable||this.checkHitboxCollision(e.hitbox,s.entity)&&(this.processHit(e,i,s),e.hasHit.add(i))}checkHitboxCollision(t,e){if(!t||!e.position)return!1;const i=t.position,s=e.position;return i.distanceTo(s)<1.5}processHit(t,e,i){const s=this.activeCombatants.get(t.attackerId);if(!s)return;if(i.isParrying){this.processParry(t.attackerId,e);return}let a=t.damage;i.isBlocking&&(a*=this.rules.blockDamageReduction);const o=Math.random()<.15;o&&(a*=this.timings.criticalMultiplier,this.stats.criticalHits++);const r=this.checkBackstab(s.entity,i.entity);r&&(a*=this.timings.backstabMultiplier,this.stats.backstabs++),this.applyDamage(i,a,"direct",t.weaponType),s.momentum=Math.min(100,s.momentum+this.rules.momentumGain),s.lastHitTime=Date.now(),this.stats.totalHits++,this.stats.totalDamage+=a,this.stats.maxCombo=Math.max(this.stats.maxCombo,s.combo),t.attackType==="heavy"&&this.applyKnockback(i,s.entity,5),this.logCombatEvent({type:"hit",attackerId:t.attackerId,targetId:e,damage:a,isCritical:o,isBackstab:r,weaponType:t.weaponType,timestamp:Date.now()})}processParry(t,e){const i=this.activeCombatants.get(t),s=this.activeCombatants.get(e);!i||!s||(this.applyStatusEffect(i,"stun",1e3),s.canCounter=!0,setTimeout(()=>{s.canCounter=!1},this.timings.counterWindow),s.momentum=Math.min(100,s.momentum+30),this.stats.parries++,this.logCombatEvent({type:"parry",attackerId:t,defenderId:e,timestamp:Date.now()}))}checkBackstab(t,e){if(!t.position||!e.position||!e.rotation)return!1;const i=new n().subVectors(t.position,e.position).normalize(),s=new n(0,0,1).applyAxisAngle(new n(0,1,0),e.rotation.y||0);return i.dot(s)>.5}applyDamage(t,e,i,s){for(const[a,o]of t.statusEffects)o.damageMultiplier&&(e*=o.damageMultiplier);t.hp=Math.max(0,t.hp-e),t.hp<=0&&this.handleDeath(t),this.damageEvents.push({entity:t.entity,damage:Math.round(e),damageType:i,source:s,timestamp:Date.now()})}applyKnockback(t,e,i){if(!t.entity.position||!e.position)return;const a=new n().subVectors(t.entity.position,e.position).normalize().multiplyScalar(i);t.entity.position.add(a)}applyStatusEffect(t,e,i){const s=this.statusEffects[e];s&&t.statusEffects.set(e,{...s,remaining:i||s.duration})}updateCombo(t,e){const i=Date.now();i-t.lastHitTime>this.timings.comboWindow&&(t.combo=0),t.combo++,t.lastHitTime=i,t.combo>=4&&this.stats.combosCompleted++}canAttack(t){return!(t.isDodging||t.isParrying||t.statusEffects.has("stun")||t.stamina<10)}processDamageEvents(){for(const t of this.damageEvents)this.emitDamageEvent(t);this.damageEvents=[]}emitDamageEvent(t){window.gameEngine&&window.gameEngine.eventBus?.emit("combat:damage",t)}handleDeath(t){t.isDead=!0,window.gameEngine&&window.gameEngine.eventBus?.emit("combat:death",{entity:t.entity,timestamp:Date.now()})}cleanupHitboxes(t){this.activeHitboxes=this.activeHitboxes.filter(e=>{const i=t-e.createdAt>e.duration;return i&&e.hitbox&&(this.scene.remove(e.hitbox),e.hitbox.geometry?.dispose(),e.hitbox.material?.dispose()),!i})}logCombatEvent(t){this.combatLog.push(t),this.combatLog.length>100&&this.combatLog.shift()}getCombatStats(t){const e=this.activeCombatants.get(t);return e?{hp:e.hp,maxHp:e.maxHp,stamina:e.stamina,maxStamina:e.maxStamina,momentum:e.momentum,combo:e.combo,statusEffects:Array.from(e.statusEffects.keys()),isBlocking:e.isBlocking,isDodging:e.isDodging,isParrying:e.isParrying}:null}getStats(){return{...this.stats,activeCombatants:this.activeCombatants.size,activeHitboxes:this.activeHitboxes.length}}dispose(){for(const t of this.activeHitboxes)t.hitbox&&(this.scene.remove(t.hitbox),t.hitbox.geometry?.dispose(),t.hitbox.material?.dispose());this.activeHitboxes=[],this.activeCombatants.clear(),this.damageEvents=[],this.combatLog=[]}}export{b as CombatSystemOverhauled};
