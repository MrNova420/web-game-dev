class l{constructor(t,e){this.audioSystem=t,this.inputManager=e,this.isPlaying=!1,this.currentSong=null,this.score=0,this.combo=0,this.maxCombo=0,this.accuracy=100,this.health=100,this.timing={perfect:30,great:60,good:90,bad:120},this.scoring={perfect:300,great:200,good:100,bad:50,miss:0,comboMultiplier:.1},this.lanes=4,this.laneKeys=["a","s","d","f"],this.activeNotes=[],this.noteSpeed=5,this.songs=this.initializeSongLibrary(),this.stats={songsPlayed:0,perfectHits:0,greatHits:0,goodHits:0,badHits:0,misses:0,totalScore:0,highestCombo:0},this.hitEffects=[],this.comboEffects=[]}initializeSongLibrary(){return{beginner_flow:{name:"Beginner Flow",artist:"Smoke Beats",difficulty:1,bpm:120,duration:180,unlocked:!0,notes:this.generateNotePattern("easy",120,180)},mystic_rhythm:{name:"Mystic Rhythm",artist:"Herb Harmony",difficulty:3,bpm:140,duration:210,unlocked:!1,unlockScore:5e4,notes:this.generateNotePattern("medium",140,210)},psychedelic_beats:{name:"Psychedelic Beats",artist:"Cannabis Collective",difficulty:4,bpm:160,duration:240,unlocked:!1,unlockScore:1e5,notes:this.generateNotePattern("medium",160,240)},smoke_wielders_anthem:{name:"Smoke Wielder's Anthem",artist:"Dynasty Band",difficulty:6,bpm:180,duration:270,unlocked:!1,unlockScore:2e5,notes:this.generateNotePattern("hard",180,270)},eternal_haze:{name:"Eternal Haze",artist:"Emberveil Orchestra",difficulty:7,bpm:200,duration:300,unlocked:!1,unlockScore:35e4,notes:this.generateNotePattern("hard",200,300)},omega_symphony:{name:"Omega Symphony",artist:"Godmode Composers",difficulty:10,bpm:240,duration:360,unlocked:!1,unlockScore:1e6,notes:this.generateNotePattern("expert",240,360)}}}generateNotePattern(t,e,s){const i=[],o=6e4/e,a=s*1e3/o,r={easy:.3,medium:.5,hard:.7,expert:.9}[t]||.5;for(let n=0;n<a;n++)Math.random()<r&&i.push({time:n*o,lane:Math.floor(Math.random()*this.lanes),type:this.getNoteType(t,n),hit:!1});return i.sort((n,h)=>n.time-h.time)}getNoteType(t,e){const s=Math.random();return t==="expert"&&s<.2?"special":(t==="hard"||t==="expert")&&s<.3?"double":"normal"}startSong(t){const e=this.songs[t];return e?e.unlocked?(this.isPlaying=!0,this.currentSong=e,this.score=0,this.combo=0,this.maxCombo=0,this.accuracy=100,this.health=100,this.activeNotes=JSON.parse(JSON.stringify(e.notes)),this.audioSystem&&this.audioSystem.playMusic(`/assets/music/${t}.mp3`),this.stats.songsPlayed++,!0):(console.warn(`Song ${t} is locked`),!1):(console.warn(`Song ${t} not found`),!1)}update(t){if(!this.isPlaying||!this.currentSong)return;const e=this.getCurrentSongTime();this.updateNotes(e,t),this.checkMissedNotes(e),this.updateEffects(t),e>=this.currentSong.duration*1e3&&this.endSong()}getCurrentSongTime(){return this.audioSystem?this.audioSystem.getCurrentTime()*1e3:0}updateNotes(t,e){for(const s of this.activeNotes)s.hit||(s.visualPosition=this.calculateNotePosition(s.time,t))}calculateNotePosition(t,e){const i=(t-e)/1e3*this.noteSpeed;return Math.max(0,i)}checkMissedNotes(t){for(const e of this.activeNotes){if(e.hit)continue;t-e.time>this.timing.bad&&(this.onNoteMiss(e),e.hit=!0)}}onKeyPress(t){if(!this.isPlaying)return;const e=this.getCurrentSongTime();let s=null,i=1/0;for(const o of this.activeNotes){if(o.hit||o.lane!==t)continue;const a=Math.abs(e-o.time);a<i&&a<=this.timing.bad&&(s=o,i=a)}s&&(this.onNoteHit(s,i),s.hit=!0)}onNoteHit(t,e){let s,i;e<=this.timing.perfect?(s="perfect",i=this.scoring.perfect,this.stats.perfectHits++):e<=this.timing.great?(s="great",i=this.scoring.great,this.stats.greatHits++):e<=this.timing.good?(s="good",i=this.scoring.good,this.stats.goodHits++):(s="bad",i=this.scoring.bad,this.stats.badHits++);const o=1+this.combo*this.scoring.comboMultiplier;i=Math.floor(i*o),this.score+=i,this.stats.totalScore+=i,s!=="bad"?(this.combo++,this.maxCombo=Math.max(this.maxCombo,this.combo),this.stats.highestCombo=Math.max(this.stats.highestCombo,this.combo)):this.combo=0,this.createHitEffect(t.lane,s),this.combo>0&&this.combo%10===0&&this.onComboMilestone(this.combo)}onNoteMiss(t){this.stats.misses++,this.combo=0,this.health=Math.max(0,this.health-5),this.createMissEffect(t.lane),this.health<=0&&this.failSong()}onComboMilestone(t){this.createComboEffect(t);const e=t*10;this.score+=e,window.gameEngine&&window.gameEngine.eventBus?.emit("rhythm:combo",{combo:t,bonus:e})}createHitEffect(t,e){const s={perfect:16776960,great:65280,good:65535,bad:16737792};this.hitEffects.push({lane:t,quality:e,color:s[e],alpha:1,scale:1,time:0})}createMissEffect(t){this.hitEffects.push({lane:t,quality:"miss",color:16711680,alpha:1,scale:1,time:0})}createComboEffect(t){this.comboEffects.push({combo:t,alpha:1,scale:1,time:0})}updateEffects(t){this.hitEffects=this.hitEffects.filter(e=>(e.time+=t,e.alpha-=t*2,e.scale+=t*2,e.alpha>0)),this.comboEffects=this.comboEffects.filter(e=>(e.time+=t,e.alpha-=t,e.scale+=t,e.alpha>0))}endSong(){this.isPlaying=!1;const t=this.currentSong.notes.length,s=(this.stats.perfectHits+this.stats.greatHits+this.stats.goodHits+this.stats.badHits)/t*100,i={song:this.currentSong.name,score:this.score,maxCombo:this.maxCombo,accuracy:s.toFixed(2),perfect:this.stats.perfectHits,great:this.stats.greatHits,good:this.stats.goodHits,bad:this.stats.badHits,miss:this.stats.misses,rank:this.calculateRank(s,this.maxCombo)};return this.checkUnlocks(this.score),this.saveHighScore(this.currentSong,this.score),window.gameEngine&&window.gameEngine.eventBus?.emit("rhythm:complete",i),i}failSong(){this.isPlaying=!1;const t={song:this.currentSong.name,score:this.score,maxCombo:this.maxCombo,failed:!0};return window.gameEngine&&window.gameEngine.eventBus?.emit("rhythm:failed",t),t}calculateRank(t,e){return t===100&&e>=this.currentSong.notes.length?"SS":t>=95?"S":t>=90?"A":t>=80?"B":t>=70?"C":t>=60?"D":"F"}checkUnlocks(t){for(const[e,s]of Object.entries(this.songs))!s.unlocked&&s.unlockScore&&t>=s.unlockScore&&(s.unlocked=!0,window.gameEngine&&window.gameEngine.eventBus?.emit("rhythm:unlock",{songId:e,songName:s.name}))}saveHighScore(t,e){const s=`rhythm_highscore_${t.name}`,i=localStorage.getItem(s)||0;return e>i?(localStorage.setItem(s,e),!0):!1}getHighScore(t){const e=this.songs[t];if(!e)return 0;const s=`rhythm_highscore_${e.name}`;return parseInt(localStorage.getItem(s)||"0")}getAvailableSongs(){return Object.entries(this.songs).filter(([t,e])=>e.unlocked).map(([t,e])=>({id:t,name:e.name,artist:e.artist,difficulty:e.difficulty,bpm:e.bpm,duration:e.duration,highScore:this.getHighScore(t)}))}getStats(){return{...this.stats}}reset(){this.isPlaying=!1,this.currentSong=null,this.score=0,this.combo=0,this.maxCombo=0,this.activeNotes=[],this.hitEffects=[],this.comboEffects=[]}}export{l as RhythmGameSystem};
