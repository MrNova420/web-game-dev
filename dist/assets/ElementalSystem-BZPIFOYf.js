class d{constructor(i,t,e){this.combatSystem=i,this.particleSystem=t,this.audioSystem=e,this.elements=this.initializeElements(),this.elementalChart=this.initializeElementalChart(),this.reactions=this.initializeReactions(),this.activeAuras=new Map,this.elementalStates=new Map}initializeElements(){return{physical:{name:"Physical",color:"#808080",description:"Raw physical damage",icon:"sword"},fire:{name:"Fire",color:"#ff4400",description:"Burns enemies and ignites objects",icon:"flame",dotEffect:"burn"},ice:{name:"Ice",color:"#00ddff",description:"Freezes enemies and slows movement",icon:"snowflake",statusEffect:"frozen",slowAmount:.5},lightning:{name:"Lightning",color:"#ffff00",description:"Chains between targets and stuns",icon:"bolt",statusEffect:"stunned",chainCount:3,chainRange:5},earth:{name:"Earth",color:"#8b4513",description:"Heavy damage with knockback",icon:"mountain",knockbackMultiplier:1.5},wind:{name:"Wind",color:"#99ff99",description:"Light, fast attacks with knockback",icon:"wind",speedBonus:1.3},water:{name:"Water",color:"#0088ff",description:"Heals and cleanses status effects",icon:"droplet",healingMultiplier:1},light:{name:"Light",color:"#ffffdd",description:"Holy damage effective vs undead/dark",icon:"sun",vsUndead:2,vsDark:1.5},dark:{name:"Dark",color:"#330033",description:"Corrupts and drains life",icon:"moon",lifeDrain:.2,corruptionChance:.3},poison:{name:"Poison",color:"#00ff00",description:"Deals damage over time",icon:"skull",dotEffect:"poison",dotDuration:1e4}}}initializeElementalChart(){return{fire:{fire:.5,ice:2,water:.5,earth:1,wind:1.5,lightning:1,light:1,dark:1,physical:1,poison:1},ice:{fire:.5,ice:.5,water:1.5,earth:1,wind:.75,lightning:1,light:1,dark:1,physical:1,poison:1.5},lightning:{fire:1,ice:1.5,water:2,earth:.5,wind:1.5,lightning:.5,light:1,dark:1.5,physical:1,poison:1},water:{fire:2,ice:1,water:.5,earth:1.5,wind:1,lightning:.5,light:1,dark:1,physical:1,poison:.75},earth:{fire:1,ice:1,water:.75,earth:.5,wind:.5,lightning:2,light:1,dark:1,physical:1.5,poison:1},wind:{fire:1.5,ice:1,water:1,earth:2,wind:.5,lightning:1,light:1,dark:1,physical:1,poison:1.5},light:{fire:1,ice:1,water:1,earth:1,wind:1,lightning:1,light:.5,dark:2.5,physical:1,poison:1.5},dark:{fire:1,ice:1,water:1,earth:1,wind:1,lightning:1,light:.5,dark:.5,physical:1,poison:1.5},poison:{fire:1,ice:.75,water:1.5,earth:1,wind:.75,lightning:1,light:.5,dark:1.5,physical:1,poison:.5},physical:{fire:1,ice:1,water:1,earth:.75,wind:1,lightning:1,light:1,dark:1,physical:1,poison:1}}}initializeReactions(){return{"fire+ice":{name:"Steam Explosion",effect:"aoe_damage",multiplier:1.5,radius:5,particle:"steam"},"fire+water":{name:"Steam",effect:"obscure_vision",duration:3e3,particle:"steam"},"fire+wind":{name:"Inferno",effect:"amplified_fire",multiplier:1.8,particle:"tornado_fire"},"ice+water":{name:"Blizzard",effect:"aoe_freeze",radius:6,duration:2e3,particle:"blizzard"},"ice+wind":{name:"Frost Storm",effect:"slow_aoe",radius:8,slowAmount:.7,duration:4e3,particle:"frost_storm"},"lightning+water":{name:"Electrocution",effect:"chain_lightning",multiplier:2,chainCount:5,particle:"electric_water"},"lightning+wind":{name:"Thunderstorm",effect:"random_strikes",strikeCount:5,radius:10,particle:"lightning_storm"},"earth+water":{name:"Mud Trap",effect:"immobilize",duration:3e3,particle:"mud"},"light+dark":{name:"Void Rift",effect:"damage_amplify",multiplier:3,duration:2e3,particle:"void_explosion"},"poison+fire":{name:"Toxic Fumes",effect:"poison_aoe",radius:7,duration:8e3,particle:"toxic_cloud"}}}calculateElementalDamage(i,t,e){const a=this.elementalChart[i]?.[t]||1;return{damage:e*a,multiplier:a,effective:a>1,resisted:a<1}}applyElementalAttack(i,t,e,a){const o=this.getEntityElement(t),s=this.calculateElementalDamage(e,o,a);return this.combatSystem.dealDamage(i,t,s.damage),this.applyElementalEffect(t,e,s.damage),this.checkElementalReaction(t,e),this.playElementalEffect(t,e,s.effective,s.resisted),s}applyElementalEffect(i,t,e){const a=this.elements[t];if(a){if(a.dotEffect){const o=e*.1,s=a.dotDuration||5e3;this.combatSystem.applyStatusEffect(i,a.dotEffect,s,o)}switch(a.statusEffect&&this.combatSystem.applyStatusEffect(i,a.statusEffect,2e3),t){case"lightning":this.chainLightning(i,e,a.chainCount,a.chainRange);break;case"earth":this.combatSystem.applyKnockback(i,null,3*a.knockbackMultiplier);break;case"dark":e*a.lifeDrain;break}}}chainLightning(i,t,e,a){const o=this.combatSystem.getPosition(i),s=this.combatSystem.getEnemiesInRadius(o,a);let n=t*.7,r=[i];for(let m=0;m<Math.min(e,s.length);m++){const l=s.find(c=>!r.includes(c));if(!l)break;if(this.combatSystem.dealDamage(null,l,n),r.push(l),this.particleSystem){const c=this.combatSystem.getPosition(r[r.length-2]),h=this.combatSystem.getPosition(l);this.particleSystem.createLightningBolt(c,h)}n*=.7}}checkElementalReaction(i,t){const e=this.elementalStates.get(i);if(!e)return this.elementalStates.set(i,{element:t,timestamp:Date.now()}),null;if(Date.now()-e.timestamp>3e3)return this.elementalStates.set(i,{element:t,timestamp:Date.now()}),null;const o=`${e.element}+${t}`,s=`${t}+${e.element}`,n=this.reactions[o]||this.reactions[s];return n?(this.triggerReaction(i,n),this.elementalStates.delete(i),n):null}triggerReaction(i,t){const e=this.combatSystem.getPosition(i);switch(this.particleSystem&&this.particleSystem.createEffect(t.particle,e,{scale:1.5,duration:2e3}),this.audioSystem&&this.audioSystem.playSFX("elemental_reaction",1.5),t.effect){case"aoe_damage":this.combatSystem.getEnemiesInRadius(e,t.radius).forEach(n=>{const r=this.combatSystem.getBaseDamage(i)*t.multiplier;this.combatSystem.dealDamage(null,n,r)});break;case"aoe_freeze":this.combatSystem.getEnemiesInRadius(e,t.radius).forEach(n=>{this.combatSystem.applyStatusEffect(n,"frozen",t.duration)});break;case"slow_aoe":this.combatSystem.getEnemiesInRadius(e,t.radius).forEach(n=>{this.combatSystem.applyStatusEffect(n,"slow",t.duration,t.slowAmount)});break;case"chain_lightning":this.chainLightning(i,this.combatSystem.getBaseDamage(i)*t.multiplier,t.chainCount,10);break;case"immobilize":this.combatSystem.applyStatusEffect(i,"immobilized",t.duration);break}}createElementalAura(i,t,e,a){this.activeAuras.set(i,{element:t,radius:e,duration:a,startTime:Date.now()}),this.particleSystem&&this.particleSystem.createAura(i,t,e)}getEntityElement(i){return"physical"}playElementalEffect(i,t,e,a){if(!this.particleSystem||!this.audioSystem)return;const o=this.combatSystem.getPosition(i),s=this.elements[t];this.particleSystem.createEffect(`elemental_${t}`,o,{color:s.color,scale:e?1.5:a?.7:1});const n=e?1.2:a?.8:1;this.audioSystem.playSFX(`element_${t}`,n)}update(i){const t=Date.now();for(const[e,a]of this.elementalStates.entries())t-a.timestamp>3e3&&this.elementalStates.delete(e);for(const[e,a]of this.activeAuras.entries())if(t-a.startTime>a.duration)this.activeAuras.delete(e);else{const o=this.combatSystem.getPosition(e);this.combatSystem.getEnemiesInRadius(o,a.radius).forEach(n=>{this.applyElementalAttack(e,n,a.element,5*(i/1e3))})}}}export{d as default};
