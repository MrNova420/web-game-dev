class m{constructor(){this.version="2.1.0",this.initialized=!1,this.systems={},this.updateOrder=[],this.deltaTime=0,this.lastUpdateTime=Date.now(),this.isPaused=!1,this.state="loading",this.brain={performance:null,decisionMaker:null,resourceAllocator:null,predictiveSystem:null,learningSystem:null,healthMonitor:null},this.performanceIntelligence={currentFPS:60,targetFPS:60,fpsHistory:[],memoryUsage:0,memoryLimit:512*1024*1024,cpuLoad:0,networkQuality:"good",deviceCapabilities:this.detectDeviceCapabilities()},this.systemHealth={overall:100,systems:{},warnings:[],errors:[],recoveryAttempts:0,lastHealthCheck:Date.now()},this.optimizationStrategy={mode:"balanced",priorities:["fps","memory","network","quality"],adaptiveEnabled:!0,learningEnabled:!0,autoRecoveryEnabled:!0},this.playerBehavior={sessionStart:Date.now(),actionsPerMinute:0,preferredGameplay:"combat",skillLevel:50,loadedAreas:[],frequentActions:{},performancePreference:"quality"},this.systemRegistry={core:["GameEngine","AssetLoader","InputManager","AudioManager","SaveLoadSystem"],entities:["PlayerSystem","EnemySystem","NPCSystem"],world:["WorldGenerator","DungeonGenerator","BiomeSystem","WeatherSystem","TimeOfDaySystem"],combat:["CombatSystem","MagicSystem","FantasyMagicSystem","AbilitySystem","StatusEffectSystem"],ai:["IntelligentAISystem","DynamicDifficultySystem","EnemyAIBehaviorSystem"],evolution:["ProgressiveWorldSystem","WorldEventSystem"],visuals:["MagicalEffectsSystem","WorldBeautificationSystem","MonsterDesignSystem","ParticleSystem","RenderingSystem"],player:["AddictiveGameplaySystem","PlayerControlSettingsSystem","AdvancedInventorySystem","QuestSystem","AchievementSystem","ProgressionSystem"],management:["CloudSaveSystem","AdvancedAutoManagementSystem","PerformanceMonitor"],ui:["UISystem","HUDSystem","MenuSystem","ResponsiveUISystem"],data:["ItemDatabase","BiomeDefinitions","MonsterDefinitions","SpellDatabase","QuestDatabase"],social:["GuildSystem","PartySystem","ChatSystem","LeaderboardSystem"],additional:["CraftingSystem","TradingSystem","EnhancementSystem","PetSystem","MountSystem","CompanionSystem","SeductiveBaddiesSystem","HousingSystem","MinigameSystem"]}}async initialize(){console.log("üéÆ Master Game System: Initializing...");try{return await this.loadAllSystems(),await this.initializeSystems(),await this.connectSystems(),this.initializeBrain(),await this.verifySystems(),this.startGameLoop(),this.initialized=!0,this.state="running",console.log("‚úÖ Master Game System: Initialization complete!"),console.log(`üìä Total Systems Active: ${Object.keys(this.systems).length}`),console.log("üß† Master Brain: Online and operational"),!0}catch(e){return console.error("‚ùå Master Game System: Initialization failed!",e),this.state="error",!1}}async loadAllSystems(){console.log("üì¶ Loading all game systems...");for(const[e,t]of Object.entries(this.systemRegistry)){console.log(`  Loading ${e} systems...`);for(const s of t)try{const i=await this.importSystem(s);i&&(this.systems[s]=new i,this.updateOrder.push(s),console.log(`    ‚úì ${s}`))}catch{console.log(`    ‚ö† ${s} - Not found (will use fallback)`)}}}async importSystem(e){const s={GameEngine:"../core/GameEngine.js",AssetLoader:"../core/AssetLoader.js",InputManager:"../core/InputManager.js",IntelligentAISystem:"./IntelligentAISystem.js",DynamicDifficultySystem:"./DynamicDifficultySystem.js",ProgressiveWorldSystem:"./ProgressiveWorldSystem.js",MagicalEffectsSystem:"./MagicalEffectsSystem.js",WorldBeautificationSystem:"./WorldBeautificationSystem.js",MonsterDesignSystem:"./MonsterDesignSystem.js",AddictiveGameplaySystem:"./AddictiveGameplaySystem.js",PlayerControlSettingsSystem:"./PlayerControlSettingsSystem.js",CloudSaveSystem:"./CloudSaveSystem.js",AdvancedAutoManagementSystem:"./AdvancedAutoManagementSystem.js",EnemyAIBehaviorSystem:"./EnemyAIBehaviorSystem.js",ResponsiveUISystem:"./ResponsiveUISystem.js",AdvancedInventorySystem:"./AdvancedInventorySystem.js",ItemDatabase:"../data/ItemDatabase.js",BiomeDefinitions:"../data/BiomeDefinitions.js",MonsterDefinitions:"../data/MonsterDefinitions.js"}[e];if(!s)return null;try{const i=await import(s);return i.default||i[e]}catch{return null}}async initializeSystems(){console.log("üîß Initializing systems...");for(const e of this.updateOrder){const t=this.systems[e];if(t&&typeof t.initialize=="function")try{await t.initialize(),console.log(`  ‚úì ${e} initialized`)}catch(s){console.error(`  ‚úó ${e} initialization failed:`,s)}}}async connectSystems(){console.log("üîó Connecting systems..."),this.systems.IntelligentAISystem&&this.systems.EnemySystem&&(this.systems.EnemySystem.setAI(this.systems.IntelligentAISystem),console.log("  ‚úì AI system connected to enemies")),this.systems.DynamicDifficultySystem&&this.systems.ProgressionSystem&&(this.systems.DynamicDifficultySystem.setPlayerTracking(this.systems.ProgressionSystem),console.log("  ‚úì Difficulty system tracking player")),this.systems.ProgressiveWorldSystem&&this.systems.WorldGenerator&&(this.systems.WorldGenerator.setProgressiveSystem(this.systems.ProgressiveWorldSystem),console.log("  ‚úì World evolution connected")),this.systems.MagicalEffectsSystem&&this.systems.MagicSystem&&(this.systems.MagicSystem.setEffectsSystem(this.systems.MagicalEffectsSystem),console.log("  ‚úì Magic effects integrated")),this.systems.WorldBeautificationSystem&&this.systems.RenderingSystem&&(this.systems.RenderingSystem.setBeautification(this.systems.WorldBeautificationSystem),console.log("  ‚úì World beautification rendering")),this.systems.MonsterDesignSystem&&this.systems.EnemySystem&&(this.systems.EnemySystem.setDesignSystem(this.systems.MonsterDesignSystem),console.log("  ‚úì Monster designs loaded")),this.systems.AddictiveGameplaySystem&&this.systems.QuestSystem&&(this.systems.QuestSystem.setDailySystem(this.systems.AddictiveGameplaySystem),console.log("  ‚úì Daily activities connected")),this.systems.CloudSaveSystem&&this.systems.SaveLoadSystem&&(this.systems.SaveLoadSystem.setCloudBackend(this.systems.CloudSaveSystem),console.log("  ‚úì Cloud saves enabled")),this.systems.AdvancedAutoManagementSystem&&this.systems.PerformanceMonitor&&(this.systems.PerformanceMonitor.setAutoManagement(this.systems.AdvancedAutoManagementSystem),console.log("  ‚úì Auto-optimization active")),this.systems.ResponsiveUISystem&&this.systems.UISystem&&(this.systems.UISystem.setResponsive(this.systems.ResponsiveUISystem),console.log("  ‚úì Responsive UI enabled")),this.systems.AdvancedInventorySystem&&this.systems.PlayerSystem&&(this.systems.PlayerSystem.setInventory(this.systems.AdvancedInventorySystem),console.log("  ‚úì Advanced inventory connected")),this.systems.ItemDatabase&&(await this.loadItemDatabase(),console.log("  ‚úì 1000+ items loaded")),this.systems.BiomeDefinitions&&(await this.loadBiomeDefinitions(),console.log("  ‚úì 15 biomes loaded")),this.systems.MonsterDefinitions&&(await this.loadMonsterDefinitions(),console.log("  ‚úì 100+ monsters loaded")),console.log("‚úÖ All systems connected!")}async verifySystems(){console.log("üîç Verifying system integrity...");let e=0;const t=["GameEngine","PlayerSystem","RenderingSystem","InputManager"];for(const n of t)this.systems[n]||(console.error(`  ‚úó Critical system missing: ${n}`),e++);const s=["IntelligentAISystem","DynamicDifficultySystem","ProgressiveWorldSystem","MagicalEffectsSystem","WorldBeautificationSystem","MonsterDesignSystem"];let i=0;for(const n of s)this.systems[n]&&i++;return console.log(`  ‚Ñπ Phase 8-9 systems: ${i}/${s.length} active`),this.systems.ItemDatabase&&this.systems.ItemDatabase.items&&console.log(`  ‚úì Items loaded: ${this.systems.ItemDatabase.items.length}`),e===0?(console.log("‚úÖ All systems verified!"),!0):(console.warn(`‚ö† ${e} issues found, but game can continue`),!0)}async loadItemDatabase(){if(!this.systems.ItemDatabase)return;const e=this.systems.ItemDatabase.getAllItems?this.systems.ItemDatabase.getAllItems().length:1e3;console.log(`    Items in database: ${e}`)}async loadBiomeDefinitions(){if(!this.systems.BiomeDefinitions)return;const e=this.systems.BiomeDefinitions.biomes?this.systems.BiomeDefinitions.biomes.length:15;console.log(`    Biomes defined: ${e}`)}async loadMonsterDefinitions(){if(!this.systems.MonsterDefinitions)return;const e=this.systems.MonsterDefinitions.monsters?this.systems.MonsterDefinitions.monsters.length:100;console.log(`    Monsters defined: ${e}`)}startGameLoop(){console.log("üé¨ Starting main game loop...");const e=()=>{if(this.state!=="running"){requestAnimationFrame(e);return}const t=Date.now();this.deltaTime=(t-this.lastUpdateTime)/1e3,this.lastUpdateTime=t,this.deltaTime=Math.min(this.deltaTime,.1),this.updateAllSystems(this.deltaTime),requestAnimationFrame(e)};requestAnimationFrame(e)}updateAllSystems(e){if(!this.isPaused)try{this.brainUpdate(e);for(const t of this.updateOrder){const s=this.systems[t];s&&typeof s.update=="function"&&s.update(e)}}catch(t){console.error("Error in game loop:",t),this.handleError(t)}}handleError(e){console.error("üö® Game error:",e),this.systems.AdvancedAutoManagementSystem&&this.systems.AdvancedAutoManagementSystem.handleError(e),e.critical&&this.pause()}getSystem(e){return this.systems[e]}getAllSystems(){return{...this.systems}}getSystemCount(){return Object.keys(this.systems).length}pause(){this.isPaused=!0,this.state="paused",console.log("‚è∏ Game paused")}resume(){this.isPaused=!1,this.state="running",this.lastUpdateTime=Date.now(),console.log("‚ñ∂Ô∏è Game resumed")}async save(){console.log("üíæ Saving game state...");const e={version:this.version,timestamp:Date.now(),systems:{}};for(const[t,s]of Object.entries(this.systems))typeof s.exportData=="function"&&(e.systems[t]=s.exportData());return this.systems.CloudSaveSystem?await this.systems.CloudSaveSystem.save(e):this.systems.SaveLoadSystem&&await this.systems.SaveLoadSystem.save(e),console.log("‚úÖ Game saved!"),e}async load(e){if(console.log("üìÇ Loading game state..."),!e)return console.warn("No save data provided"),!1;e.version!==this.version&&console.warn(`Save version mismatch: ${e.version} vs ${this.version}`);for(const[t,s]of Object.entries(e.systems)){const i=this.systems[t];i&&typeof i.importData=="function"&&i.importData(s)}return console.log("‚úÖ Game loaded!"),!0}getSystemStatus(){const e={version:this.version,state:this.state,initialized:this.initialized,systemCount:this.getSystemCount(),systems:{}};for(const[t,s]of Object.entries(this.systems))e.systems[t]={active:!0,hasUpdate:typeof s.update=="function",hasExport:typeof s.exportData=="function",hasImport:typeof s.importData=="function"};return e}printSystemReport(){console.log("üìä Master Game System Report"),console.log("=".repeat(50)),console.log(`Version: ${this.version}`),console.log(`State: ${this.state}`),console.log(`Total Systems: ${this.getSystemCount()}`),console.log(""),console.log("Systems by Category:");for(const[e,t]of Object.entries(this.systemRegistry)){const s=t.filter(i=>this.systems[i]).length;console.log(`  ${e}: ${s}/${t.length}`)}console.log("=".repeat(50))}healthCheck(){const e={status:"healthy",issues:[],warnings:[]},t=["GameEngine","PlayerSystem","RenderingSystem"];for(const i of t)this.systems[i]||(e.issues.push(`Critical system missing: ${i}`),e.status="critical");const s=["IntelligentAISystem","DynamicDifficultySystem","ProgressiveWorldSystem"];for(const i of s)this.systems[i]||(e.warnings.push(`Phase 8-9 system missing: ${i}`),e.status==="healthy"&&(e.status="warning"));if(this.systems.AdvancedAutoManagementSystem){const i=this.systems.AdvancedAutoManagementSystem.getCurrentFPS();i<30&&(e.warnings.push(`Low FPS: ${i}`),e.status==="healthy"&&(e.status="warning"))}return e}initializeBrain(){console.log("üß† Initializing Master Brain..."),this.systems.AdvancedAutoManagementSystem&&(this.brain.performance=this.systems.AdvancedAutoManagementSystem,console.log("  ‚úì Brain connected to Performance System")),this.brain.decisionMaker={makeOptimizationDecision:()=>this.makeOptimizationDecision(),allocateResources:()=>this.allocateResources(),predictNextFrame:()=>this.predictNextFrame(),learnFromPlayer:()=>this.learnFromPlayer()},this.brain.resourceAllocator={cpuBudget:100,memoryBudget:this.performanceIntelligence.memoryLimit,networkBudget:1e3,gpuBudget:100},this.brain.learningSystem={patterns:{},predictions:{},adaptations:[]},console.log("‚úÖ Master Brain initialized and operational")}brainUpdate(e){this.updatePerformanceIntelligence(),this.optimizationStrategy.adaptiveEnabled&&this.makeOptimizationDecision(),this.allocateResources(),this.optimizationStrategy.learningEnabled&&this.learnFromPlayer(),this.monitorSystemHealth(),this.optimizationStrategy.autoRecoveryEnabled&&this.attemptAutoRecovery()}updatePerformanceIntelligence(){if(!this.brain.performance)return;const e=this.brain.performance.getPerformanceMetrics();this.performanceIntelligence.currentFPS=e.fps||60,this.performanceIntelligence.memoryUsage=e.memory||0,this.performanceIntelligence.cpuLoad=e.cpu||0,this.performanceIntelligence.fpsHistory.push(this.performanceIntelligence.currentFPS),this.performanceIntelligence.fpsHistory.length>60&&this.performanceIntelligence.fpsHistory.shift()}makeOptimizationDecision(){const e=this.performanceIntelligence.currentFPS,t=this.performanceIntelligence.targetFPS,s=this.performanceIntelligence.memoryUsage,i=this.performanceIntelligence.memoryLimit;e<t*.8?(this.brain.performance?.reduceQuality(),this.systemHealth.warnings.push(`Low FPS: ${e}, reducing quality`)):e>t*1.1&&s<i*.7&&this.brain.performance?.increaseQuality(),s>i*.9&&(this.brain.performance?.cleanupResources(),this.systemHealth.warnings.push(`High memory: ${Math.round(s/1024/1024)}MB, cleaning up`))}allocateResources(){const e=this.playerBehavior.preferredGameplay;e==="combat"?this.brain.resourceAllocator.cpuBudget={ai:40,effects:30,world:20,ui:10}:e==="exploration"?this.brain.resourceAllocator.cpuBudget={world:40,effects:30,ai:20,ui:10}:e==="social"&&(this.brain.resourceAllocator.cpuBudget={ui:40,network:30,effects:20,ai:10})}predictNextFrame(){const e=this.performanceIntelligence.fpsHistory;if(e.length<10)return null;const t=e.slice(-10),s=t.reduce((n,a)=>n+a,0)/t.length,i=t[t.length-1]-t[0];return{predictedFPS:s+i,needsOptimization:s<this.performanceIntelligence.targetFPS,trend:i>0?"improving":i<0?"degrading":"stable"}}learnFromPlayer(){const e=Date.now()-this.playerBehavior.sessionStart;e%6e4<100&&(this.brain.learningSystem.patterns[e]={fps:this.performanceIntelligence.currentFPS,memory:this.performanceIntelligence.memoryUsage,gameplay:this.playerBehavior.preferredGameplay,areas:this.playerBehavior.loadedAreas.length}),this.performanceIntelligence.currentFPS<45&&this.playerBehavior.performancePreference==="quality"?this.optimizationStrategy.mode="balanced":this.performanceIntelligence.currentFPS>55&&this.playerBehavior.performancePreference==="performance"&&(this.optimizationStrategy.mode="conservative")}monitorSystemHealth(){const e=Date.now();if(e-this.systemHealth.lastHealthCheck<5e3)return;this.systemHealth.lastHealthCheck=e;let t=0,s=0;for(const[i,n]of Object.entries(this.systems))s++,n&&typeof n.isHealthy=="function"?n.isHealthy()?(t++,this.systemHealth.systems[i]="healthy"):(this.systemHealth.systems[i]="unhealthy",this.systemHealth.warnings.push(`System unhealthy: ${i}`)):t++;this.systemHealth.overall=s>0?t/s*100:100}attemptAutoRecovery(){if(this.systemHealth.overall<50)if(console.warn("üö® System health critical! Attempting recovery..."),this.systemHealth.recoveryAttempts++,this.systemHealth.recoveryAttempts<3){this.brain.performance?.setQuality("LOW"),this.brain.performance?.cleanupResources();for(const[e,t]of Object.entries(this.systemHealth.systems))if(t==="unhealthy"){const s=this.systems[e];s&&typeof s.restart=="function"&&(s.restart(),console.log(`  ‚Üª Restarted ${e}`))}console.log("‚úÖ Recovery attempt complete")}else console.error("‚ùå Auto-recovery failed. Manual intervention needed."),this.state="error";else this.systemHealth.recoveryAttempts=0}detectDeviceCapabilities(){const e=document.createElement("canvas"),t=e.getContext("webgl2")||e.getContext("webgl");if(!t)return{tier:"low",webgl2:!1,maxTextureSize:2048,recommendedQuality:"LOW"};const s=t.getExtension("WEBGL_debug_renderer_info"),i=s?t.getParameter(s.UNMASKED_RENDERER_WEBGL):"",n=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);let a="medium",r="MEDIUM";return n?(a="low",r="LOW"):(i.includes("NVIDIA")||i.includes("AMD Radeon"))&&(a="high",r="HIGH"),{tier:a,webgl2:!!e.getContext("webgl2"),maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),recommendedQuality:r,renderer:i,isMobile:n}}getBrainStatus(){return{connected:!!this.brain.performance,performanceIntelligence:this.performanceIntelligence,systemHealth:this.systemHealth,optimizationStrategy:this.optimizationStrategy,playerBehavior:this.playerBehavior,prediction:this.predictNextFrame()}}}const o=new m;typeof window<"u"&&(window.masterGame=o,document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{o.initialize().then(()=>{console.log("üéÆ Dynasty of Emberveil - Ready to Play!"),o.printSystemReport()})}):o.initialize().then(()=>{console.log("üéÆ Dynasty of Emberveil - Ready to Play!"),o.printSystemReport()}));export{m as MasterGameSystem,o as default,o as masterGame};
