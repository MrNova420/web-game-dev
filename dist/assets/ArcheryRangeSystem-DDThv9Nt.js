class u{constructor(){this.ranges=new Map,this.tournaments=new Map,this.playerScores=new Map,this.assets={bows:{basic:{model:"/assets/models/weapons/bows/basic_bow.glb",source:"Sketchfab Free"},recurve:{model:"/assets/models/weapons/bows/recurve_bow.glb",source:"Sketchfab Free"},compound:{model:"/assets/models/weapons/bows/compound_bow.glb",source:"Sketchfab Free"},longbow:{model:"/assets/models/weapons/bows/longbow.glb",source:"Sketchfab Free"},legendary:{model:"/assets/models/weapons/bows/elven_bow.glb",source:"Sketchfab Free"}},arrows:{basic:{model:"/assets/models/weapons/arrows/basic_arrow.glb",source:"Sketchfab Free"},fire:{model:"/assets/models/weapons/arrows/fire_arrow.glb",source:"Sketchfab Free"},ice:{model:"/assets/models/weapons/arrows/ice_arrow.glb",source:"Sketchfab Free"},explosive:{model:"/assets/models/weapons/arrows/explosive_arrow.glb",source:"Sketchfab Free"}},character:{model:"/assets/models/characters/archer.glb",animations:{idle:"/assets/animations/archer_idle.fbx",draw:"/assets/animations/bow_draw.fbx",aim:"/assets/animations/bow_aim.fbx",shoot:"/assets/animations/bow_shoot.fbx",reload:"/assets/animations/arrow_reload.fbx"},source:"Mixamo"},ranges:{forest:{model:"/assets/models/ranges/forest_range.glb",source:"Quaternius Medieval Pack"},castle:{model:"/assets/models/ranges/castle_range.glb",source:"Quaternius Medieval Pack"},mountain:{model:"/assets/models/ranges/mountain_range.glb",source:"Quaternius Medieval Pack"},beach:{model:"/assets/models/ranges/beach_range.glb",source:"Quaternius Medieval Pack"},arena:{model:"/assets/models/ranges/arena_range.glb",source:"Quaternius Medieval Pack"}},targets:{static_round:{model:"/assets/models/targets/target_round.glb",source:"Kenney Medieval Pack"},static_bullseye:{model:"/assets/models/targets/target_bullseye.glb",source:"Kenney Medieval Pack"},moving_horizontal:{model:"/assets/models/targets/target_moving.glb",source:"Kenney Medieval Pack"},apple:{model:"/assets/models/targets/apple_target.glb",source:"Kenney Medieval Pack"},bottle:{model:"/assets/models/targets/bottle_target.glb",source:"Kenney Medieval Pack"},barrel:{model:"/assets/models/targets/barrel_target.glb",source:"Kenney Medieval Pack"}},props:{hay_bale:{model:"/assets/models/props/hay_bale.glb",source:"Quaternius Props"},stand:{model:"/assets/models/props/archery_stand.glb",source:"Quaternius Props"},fence:{model:"/assets/models/props/wooden_fence.glb",source:"Quaternius Props"},flag:{model:"/assets/models/props/tournament_flag.glb",source:"Quaternius Props"}},ui:{crosshair:"/assets/ui/icons/crosshair.png",bow_icon:"/assets/ui/icons/bow.png",arrow_icon:"/assets/ui/icons/arrow.png",bullseye_icon:"/assets/ui/icons/bullseye.png",wind_indicator:"/assets/ui/icons/wind.png"},particles:{wind:"/assets/particles/wind_particle.png",leaves:"/assets/particles/leaf_particle.png"}},this.bowTypes={BASIC:{name:"Basic Bow",damage:20,accuracy:.8,drawTime:1.5,range:50,model:"basic"},RECURVE:{name:"Recurve Bow",damage:35,accuracy:.85,drawTime:1.2,range:65,model:"recurve"},COMPOUND:{name:"Compound Bow",damage:50,accuracy:.9,drawTime:1,range:80,model:"compound"},LONGBOW:{name:"Longbow",damage:45,accuracy:.75,drawTime:2,range:100,model:"longbow"},LEGENDARY:{name:"Elven Masterwork",damage:80,accuracy:.95,drawTime:.8,range:120,model:"legendary"}},this.arrowTypes={BASIC:{name:"Basic Arrow",damage:1,effect:null,model:"basic"},FIRE:{name:"Fire Arrow",damage:1.3,effect:"burn",model:"fire"},ICE:{name:"Ice Arrow",damage:1.2,effect:"slow",model:"ice"},EXPLOSIVE:{name:"Explosive Arrow",damage:2,effect:"explosion",model:"explosive"}},this.rangeConfigs={FOREST_RANGE:{name:"Forest Clearing",environment:"forest",difficulty:1,distances:[10,20,30,40,50],windEffect:{min:0,max:2},targetTypes:["static_round","static_bullseye"],description:"Peaceful forest range for beginners"},CASTLE_WALLS:{name:"Castle Battlements",environment:"castle",difficulty:2,distances:[20,35,50,65],windEffect:{min:1,max:4},targetTypes:["static_round","moving_horizontal","apple"],description:"Medieval castle with moderate wind"},MOUNTAIN_PEAK:{name:"Mountain Summit",environment:"mountain",difficulty:3,distances:[30,50,70,90],windEffect:{min:3,max:7},targetTypes:["static_bullseye","moving_horizontal","bottle"],description:"High altitude with strong crosswinds"},BEACH_TOURNAMENT:{name:"Seaside Tournament",environment:"beach",difficulty:2,distances:[25,40,55,70],windEffect:{min:2,max:5},targetTypes:["static_round","apple","bottle","barrel"],description:"Beach competition with ocean breeze"},GRAND_ARENA:{name:"Grand Tournament Arena",environment:"arena",difficulty:4,distances:[40,60,80,100],windEffect:{min:2,max:8},targetTypes:["static_bullseye","moving_horizontal","apple","bottle","barrel"],description:"Ultimate challenge for master archers"}},this.challengeModes={STANDARD:{name:"Standard Practice",arrows:30,timeLimit:null,scoring:"accuracy",description:"Classic target practice"},TIMED:{name:"Speed Shooting",arrows:20,timeLimit:60,scoring:"speed",description:"Hit as many targets as possible in 60 seconds"},BULLSEYE:{name:"Bullseye Challenge",arrows:15,timeLimit:null,scoring:"bullseye",description:"Only bullseyes count"},MOVING_TARGETS:{name:"Moving Target Practice",arrows:25,timeLimit:90,scoring:"moving",description:"Hit moving targets for bonus points"},TRICK_SHOTS:{name:"Trick Shot Master",arrows:10,timeLimit:null,scoring:"trick",description:"Split arrows, bank shots, multi-hits"},TOURNAMENT:{name:"Tournament Mode",arrows:36,timeLimit:null,scoring:"tournament",description:"Official tournament scoring (10 zones)"}},this.scoreZones=[{name:"X-Ring",points:10,radius:.05,color:16766720},{name:"Bullseye",points:9,radius:.1,color:16766720},{name:"Inner Gold",points:8,radius:.15,color:16711680},{name:"Outer Gold",points:7,radius:.2,color:16711680},{name:"Inner Blue",points:6,radius:.25,color:255},{name:"Outer Blue",points:5,radius:.3,color:255},{name:"Inner Black",points:4,radius:.35,color:0},{name:"Outer Black",points:3,radius:.4,color:0},{name:"Inner White",points:2,radius:.45,color:16777215},{name:"Outer White",points:1,radius:.5,color:16777215}],this.achievements={FIRST_SHOT:{name:"First Arrow",description:"Fire your first arrow",reward:50},BULLSEYE:{name:"Bullseye!",description:"Hit a bullseye",reward:100},PERFECT_SCORE:{name:"Perfect Score",description:"Score 300 in Standard Practice",reward:500},ROBIN_HOOD:{name:"Robin Hood",description:"Split an arrow",reward:1e3},MASTER_ARCHER:{name:"Master Archer",description:"Complete all range challenges",reward:2e3},TOURNAMENT_WINNER:{name:"Tournament Champion",description:"Win a tournament",reward:3e3},LEGENDARY_SHOT:{name:"Legendary Shot",description:"Hit bullseye at 100m with wind",reward:5e3}},this.tournamentSchedule=[{name:"Weekly Novice Cup",minLevel:1,maxLevel:10,entryFee:100,prize:1e3},{name:"Regional Championship",minLevel:10,maxLevel:25,entryFee:500,prize:5e3},{name:"National Masters",minLevel:25,maxLevel:50,entryFee:2e3,prize:2e4},{name:"World Grand Prix",minLevel:50,maxLevel:99,entryFee:1e4,prize:1e5},{name:"Legendary Invitational",minLevel:80,maxLevel:99,entryFee:5e4,prize:5e5}]}createRange(e,t,a){const s=this.rangeConfigs[t];if(!s)return console.error("Invalid range config:",t),null;const r={id:e,config:s,position:a,environment:s.environment,targets:[],activeSession:null,leaderboard:[],environmentModel:this.assets.ranges[s.environment].model,environmentSource:this.assets.ranges[s.environment].source,wind:{speed:0,direction:0,gustiness:.5},stats:{totalShots:0,totalHits:0,bullseyes:0,perfectRounds:0,bestScore:0}};return s.distances.forEach((o,c)=>{const i=s.targetTypes[c%s.targetTypes.length];r.targets.push(this.createTarget(i,o,s.difficulty))}),this.ranges.set(e,r),console.log(`Created archery range: ${s.name} with ${r.targets.length} targets`),console.log(`Using external environment: ${r.environmentModel} (${r.environmentSource})`),r}createTarget(e,t,a){const s=this.assets.targets[e];return{type:e,distance:t,model:s.model,source:s.source,size:1/(a*.5),moving:e.includes("moving"),movement:e.includes("moving")?{pattern:"horizontal",speed:a*.5,range:5}:null,health:e==="barrel"?3:1,hitCount:0,active:!0}}startSession(e,t,a,s="BASIC"){const r=this.ranges.get(t);if(!r)return console.error("Range not found:",t),null;const o=this.challengeModes[a],c=this.bowTypes[s],i={playerId:e,rangeId:t,mode:o,bow:c,bowModel:this.assets.bows[c.model].model,character:{model:this.assets.character.model,animations:this.assets.character.animations,source:this.assets.character.source},arrows:o.arrows,arrowsRemaining:o.arrows,currentArrowType:"BASIC",score:0,hits:0,misses:0,bullseyes:0,perfectShots:0,trickShots:0,startTime:Date.now(),timeLimit:o.timeLimit,timeRemaining:o.timeLimit,state:"active",drawProgress:0,aimPosition:{x:0,y:0},shotHistory:[],achievements:[]};return r.activeSession=i,console.log(`Started ${o.name} session at ${r.config.name}`),console.log(`Using bow: ${c.name} (${i.bowModel})`),console.log(`Character: ${i.character.model} (${i.character.source})`),i}shootArrow(e,t,a){const s=this.getSessionById(e);if(!s||s.state!=="active")return console.error("Invalid session or session not active"),null;if(s.arrowsRemaining<=0)return console.log("No arrows remaining"),null;const r=this.ranges.get(s.rangeId),o=this.arrowTypes[s.currentArrowType],c=this.calculateTrajectory(t,a,s.bow,r.wind,o),i=this.checkTargetHits(c,r.targets),n={arrowType:s.currentArrowType,arrowModel:this.assets.arrows[o.model].model,trajectory:c,hits:i,score:0,zones:[],isBullseye:!1,isPerfect:!1,isTrickShot:!1};return i.forEach(m=>{const l=this.getScoreZone(m.impactPoint,m.target);n.zones.push(l),n.score+=l.points*o.damage,l.name==="X-Ring"&&(n.isBullseye=!0,n.isPerfect=a>.95,s.bullseyes++,n.isPerfect&&s.perfectShots++),this.isTrickShot(n,s.shotHistory)&&(n.isTrickShot=!0,n.score*=2,s.trickShots++)}),s.arrowsRemaining--,s.score+=n.score,s.hits+=i.length,i.length===0&&s.misses++,s.shotHistory.push(n),this.checkAchievements(s,n),(s.arrowsRemaining===0||s.timeLimit&&s.timeRemaining<=0)&&this.endSession(s),n}calculateTrajectory(e,t,a,s,r){const o=t*a.range*2,c=a.accuracy,i={x:s.speed*Math.cos(s.direction)*(1-c),z:s.speed*Math.sin(s.direction)*(1-c)},n={x:e.x+(Math.random()-.5)*(1-c)*2+i.x,y:e.y+(Math.random()-.5)*(1-c)*2,z:e.z+i.z};return{start:{x:0,y:1.5,z:0},end:n,velocity:o,flightTime:Math.sqrt(n.x**2+n.z**2)/o}}checkTargetHits(e,t){const a=[];return t.forEach(s=>{if(!s.active)return;const r=Math.sqrt((e.end.x-s.distance)**2+e.end.y**2);r<s.size&&(a.push({target:s,impactPoint:{x:e.end.x,y:e.end.y},distance:r}),s.hitCount++,s.hitCount>=s.health&&(s.active=!1))}),a}getScoreZone(e,t){const a=Math.sqrt(e.x**2+e.y**2)/t.size;for(const s of this.scoreZones)if(a<=s.radius)return s;return{name:"Miss",points:0,radius:1,color:8947848}}isTrickShot(e,t){if(t.length===0)return!1;const a=t[t.length-1];if(e.hits.length>0&&a.hits.length>0){const s=e.hits[0],r=a.hits[0];if(Math.sqrt((s.impactPoint.x-r.impactPoint.x)**2+(s.impactPoint.y-r.impactPoint.y)**2)<.02)return!0}return!1}checkAchievements(e,t){const a=[];e.shotHistory.length===1&&a.push("FIRST_SHOT"),t.isBullseye&&a.push("BULLSEYE"),e.score>=300&&e.mode.name==="Standard Practice"&&a.push("PERFECT_SCORE"),t.isTrickShot&&a.push("ROBIN_HOOD"),a.forEach(s=>{if(!e.achievements.includes(s)){e.achievements.push(s);const r=this.achievements[s];console.log(`🏆 Achievement Unlocked: ${r.name} - ${r.description}`)}})}endSession(e){const t=this.ranges.get(e.rangeId);return e.state="completed",e.endTime=Date.now(),e.totalTime=(e.endTime-e.startTime)/1e3,e.accuracy=e.hits/(e.arrows-e.arrowsRemaining),e.averageScore=e.score/(e.arrows-e.arrowsRemaining),t.stats.totalShots+=e.arrows-e.arrowsRemaining,t.stats.totalHits+=e.hits,t.stats.bullseyes+=e.bullseyes,e.perfectShots>0&&t.stats.perfectRounds++,e.score>t.stats.bestScore&&(t.stats.bestScore=e.score),t.leaderboard.push({playerId:e.playerId,score:e.score,accuracy:e.accuracy,bullseyes:e.bullseyes,mode:e.mode.name,timestamp:e.endTime}),t.leaderboard.sort((a,s)=>s.score-a.score),t.leaderboard=t.leaderboard.slice(0,100),console.log(`Session completed! Final Score: ${e.score}`),console.log(`Accuracy: ${(e.accuracy*100).toFixed(1)}%`),console.log(`Bullseyes: ${e.bullseyes} | Perfect Shots: ${e.perfectShots}`),console.log(`Trick Shots: ${e.trickShots}`),console.log(`Achievements: ${e.achievements.length}`),e}getSessionById(e){for(const t of this.ranges.values())if(t.activeSession&&t.activeSession.playerId===e)return t.activeSession;return null}update(e){this.ranges.forEach(t=>{this.updateWind(t,e)}),this.ranges.forEach(t=>{t.activeSession&&t.activeSession.state==="active"&&t.activeSession.timeLimit&&(t.activeSession.timeRemaining-=e,t.activeSession.timeRemaining<=0&&this.endSession(t.activeSession))}),this.ranges.forEach(t=>{t.targets.forEach(a=>{a.moving&&a.active&&this.updateMovingTarget(a,e)})})}updateWind(e,t){const a=e.config.windEffect;e.wind.speed+=(Math.random()-.5)*e.wind.gustiness*t,e.wind.speed=Math.max(a.min,Math.min(a.max,e.wind.speed)),e.wind.direction+=(Math.random()-.5)*.5*t,e.wind.direction=e.wind.direction%(Math.PI*2)}updateMovingTarget(e,t){if(!e.movement)return;e.movement.currentTime=(e.movement.currentTime||0)+t;const a=Math.sin(e.movement.currentTime*e.movement.speed)*e.movement.range;e.currentOffset=a}getRangeInfo(e){const t=this.ranges.get(e);return t?{name:t.config.name,difficulty:t.config.difficulty,targets:t.targets.length,activeTargets:t.targets.filter(a=>a.active).length,environment:t.environment,environmentModel:t.environmentModel,environmentSource:t.environmentSource,wind:t.wind,stats:t.stats,leaderboard:t.leaderboard.slice(0,10)}:null}}export{u as ArcheryRangeSystem};
